{
  "hash": "b234e04b8c879a5763f34e47f84f6af4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Completing and submitting practice exercises\"\neditor: visual\ntoc: true\nnumber-sections: true\n---\n\n\n\n\n## Accesssing exercises on GitHub\n\n### Register for an account and join the student team\n\n-   You must [sign up for a GitHub user account](https://github.com/signup) and share your GitHub username with me before I can create an exercise repository for you.\n-   You must have [installed R and RStudio](https://posit.co/download/rstudio-desktop/) to complete exercises and have Git installed.\n-   Soon after I get your username, you should expect an email asking you to accept an invitation to the \"2024_Students\" Team in the class [GitHub organization](https://github.com/bldgspatialdata).\n-   You can also go to [the course repository list](https://github.com/orgs/bldgspatialdata/repositories) and, if you are logged in and have access, you should find your repository there.\n\nDon't forget to connect RStudio to GitHub before working on the class exercises! Review the [instructions on how to connect RStudio and GitHub](course-prep) for more information.\n\n## Download or update your exercise repository\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\n### What is a repository?\n\nA repository is a collection of files where changes can be tracked and managed using a version control system. Git is a version control system. GitHub is a web service that makes it easier to manage version-controlled repositories and collaborate with others. For more background, read [Ch. 1 Why Git? Why GitHub?](https://happygitwithr.com/big-picture) from Happy Git and GitHub for the useR by Jenny Bryan.\n:::\n\n### Downloading (a.k.a \"cloning\") your exercise repository\n\n-   Clone the repository to your computer using GitHub Desktop or using the GitHub website. Review the GitHub documentation on [cloning a repository with GitHub Desktop](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/cloning-and-forking-repositories-from-github-desktop) or [the GitHub website](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/cloning-a-repository-from-github-to-github-desktop) for more detailed instructions.\n-   Find and open folder where you downloaded the local copy of the exercise repository. By default, this folder should have the same name as the repository itself.\n-   As long as you keep this folder on your computer, you should do not need to clone the repository again. If you delete your local files or switch computers, you need to repeat this step.\n\n### Updating (a.k.a \"syncing\") your exercise repository {#sec-update-repo}\n\n-   I will be adding new exercises to your repository each week using GitHub. You should \"sync\" the changes to the GitHub repository with your local copy of the project each week. Read the GitHub documentation on [Syncing your branch in GitHub Desktop](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch-in-github-desktop) for more detailed instructions.\n\n## Complete the week's exercise\n\nThe process for completing will be mostly the same for each week of the class.\n\n### Locating the week's exercise file\n\n-   Locate the **\\<your first name\\>\\_\\<your last name\\>/exercises** folder on your computer.\n-   Open the `exercises.RProj` file in RStudio. Review the documentation on [managing projects in RStudio](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) or the R for Data Science [chapter on working with projects](https://r4ds.hadley.nz/workflow-scripts#projects) for more background on why projects are useful.\n-   Using the \"Files\" tab pane, locate the `exercise_01.qmd` file (or the number exercise file for this week) and open it. The file extension (`.qmd`) is short for Quarto Markdown document.\n-   If you can't find this week's exercise file, you may have forgotten to update the repository. Go back and check @sec-update-repo\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\n### What is a Quarto document?\n\nA Quarto document is a format that lets you mix blocks (also known as \"chunks\") of R code with sections of text formatted using [Markdown formatting](https://quarto.org/docs/authoring/markdown-basics.html). This format is similar to an older format known as RMarkdown (`.Rmd`). [Quarto](https://quarto.org/) comes installed with RStudio but it is a separate command line application that can turn a `qmd` document into a standalone [website](https://quarto.org/docs/websites/), a [formatted PDF](https://quarto.org/docs/output-formats/pdf-basics.html), a [presentation](https://quarto.org/docs/presentations/), and more. This course website, for example, is built with Quarto.\n\nYou can see that a [front matter](https://quarto.org/docs/authoring/front-matter.html) section at the top of each document. This front matter (also known as [YAML](https://en.wikipedia.org/wiki/YAML)) controls the format, appearance, and content of the rendered document.\n\nThe [Hello, Quarto tutorial](https://quarto.org/docs/get-started/hello/rstudio.html) is a great place to learn how to render Quarto documents, run code blocks interactively, and format text using the markdown syntax.\n:::\n\n-   Complete the project by filling in the blank spaces, fixing any \"broken\" code in the document, or adding new code in the [code blocks](https://quarto.org/docs/computations/r.html#code-blocks) that look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1 # example code\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n### Running code and writing responses to the exercise prompts\n\n-   Try executing the code in each block as you work through the practice exercise. The results from the code appear right below the block. If you get an error or a warning, try to use that information as a clue to figure out what you need to change.\n\n-   When you are done with the exercise, there should be no more blank spaces like this one: `____`. The bonus exercises are optional but otherwise any code block that started empty should now have code inside.\n\n-   Some questions require short written responses which should be completed as Markdown formatted text above or below the related code blockâ€”not as a comment inside the code block!\n\n-   If all of your code blocks run smoothly, you should be able to \"render\" the `.qmd` document to create a new HTML document. When I review completed assignments, trying to render the document will always be my first step.\n\n-   When you done with the exercise, please change the front matter for the document from `status: Available` to `status: Complete`.\n\n-   Remember, you don't need to get everything right and it is OK if your document won't render. Just try your best with each part of the exercise.\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Tips for completing exercises\n\n-   Complete this exercise from top to bottom. Blocks of code at the end of the document may depend on blocks from the beginning or middle so avoid skipping around.\n-   If you get an error message, read it. If it doesn't make sense, try looking it up. R for Data Science reminds readers that [Google is your friend](https://r4ds.hadley.nz/workflow-help.html#google-is-your-friend).\n-   Read the documentation!\n:::\n\n## Committing your completed exercise to the repository\n\nYou may have saved your updated document to your computer but the last step is to save or \"commit\" those changes to the exercise repository.\n\n\"Committing\" your changes and syncing the changes with the remote version of your repository on GitHub allows me to see your completed exercise and share feedback on your work.\n\n### Commit changes with GitHub Desktop\n\nThe first and easiest way to commit changes is using GitHub Desktop.\n\n-   Review the GitHub documentation on [Committing and reviewing changes to your project in GitHub Desktop](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/making-changes-in-a-branch/committing-and-reviewing-changes-to-your-project-in-github-desktop) for more detailed instructions.\n\n### Commit changes with RStudio\n\nThe second way to commit changes is using the Git tab within RStudio. The interface for Git within RStudio is a little less friendly but is a convenient option since you don't need to leave RStudio to commit your changes.\n\nHere is the step-by-step process (adapted from [Connect RStudio to Git and GitHub](https://happygitwithr.com/rstudio-git-github) in Happy Git and GitHub for the useR):\n\n-   Click the \"Git\" tab in upper right pane.\n-   Check \"Staged\" box for `exercise_01.qmd`.\n-   If you're not already in the Git pop-up, click \"Commit\".\n-   Type a message in \"Commit message\", such as \"Commit from RStudio\".\n-   Click \"Commit\".\n-   Finally, click the green \"Push\" button to send your local changes to GitHub.\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n### When should you commit your changes?\n\nYou don't need to wait until you are 100% finished with the exercise to commit your changes. You may want to commit the changes every time you work on the exercise. Please make sure to change the \"status\" for the exercise from \"Available\" to \"Complete\" when your exercise is complete and ready for evaluation. I will typically evaluate the last week's exercises on the Tuesday before each class session. Committing changes as you go can also avoid conflicts if I need to make corrections or additions to some part of the assignment after you started working on it.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}