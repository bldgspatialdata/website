{
  "hash": "7c3d23e542d6a1578fee14e9951d15cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Joins and functions\"\nlink-citations: true\n---\n\n\n\n\n\n\n\n## Joins\n\n`weather` only contains information for the three origin airports in NYC. If it contained weather records for all airports in the USA, what additional connection would it make to flights?\n\nThe year, month, day, hour, and origin variables almost form a compound key for weather, but there’s one hour that has duplicate observations. Can you figure out what’s special about that hour?\n\n## Functions\n\n### Vector functions\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(is.na(x))\nmean(is.na(y))\nmean(is.na(z))\n\nx / sum(x, na.rm = TRUE)\ny / sum(y, na.rm = TRUE)\nz / sum(z, na.rm = TRUE)\n\nround(x / sum(x, na.rm = TRUE) * 100, 1)\nround(y / sum(y, na.rm = TRUE) * 100, 1)\nround(z / sum(z, na.rm = TRUE) * 100, 1)\n```\n:::\n\n\n\n\nGiven a vector of birthdates, write a function to compute the age in years.\n\nWrite `both_na()`, a summary function that takes two vectors of the same length and returns the number of positions that have an NA in both vectors.\n\n### Data frame functions\n\nUsing the datasets from `nycflights13`, write a function that:\n\nFinds all flights that were cancelled (i.e. `is.na(arr_time)`) or delayed by more than an hour.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter_severe()\n```\n:::\n\n\n\n\nCounts the number of cancelled flights and the number of flights delayed by more than an hour.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> group_by(dest) |> summarize_severe()\n```\n:::\n\n\n\n\nFinds all flights that were cancelled or delayed by more than a user supplied number of hours:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter_severe(hours = 2)\n```\n:::\n\n\n\n\nSummarizes the weather to compute the minimum, mean, and maximum, of a user supplied variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather |> summarize_weather(temp)\n```\n:::\n\n\n\n\nConverts the user supplied variable that uses clock time (e.g., `dep_time`, `arr_time`, etc.) into a decimal time (i.e. `hours + (minutes / 60)`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> standardize_time(sched_dep_time)\n```\n:::\n\n\n\n\n## Plotting functions\n\nBuild a map-making function by incrementally implementing each of the steps below:\n\n- Draw a map with the `fill`, `color`, or `size` aesthetic mapped to a custom variable (your choice!)\n\n- Label a subset of the features on the map (**tip:** take a look at `geom_sf_text()` or `geom_sf_label()`)\n\n- Apply a geometric transformation to the input. The transformation can be applied to part or all of the data. The final map can display both the transformed data and the original data or only the transformed data.\n\nConsider using data from the `tigris` package as an input data source for your function. Here are two possible data sources to try:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaltimore_area_water <- tigris::area_water(\n  state = \"MD\",\n  county = c(\"Baltimore city\", \"Baltimore County\")\n)\n\nbaltimore_roads <- tigris::roads(\n  state = \"MD\",\n  county = c(\"Baltimore city\", \"Baltimore County\")\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}