{
  "hash": "350e4f1a2085cf3f398ed0081129919e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 01\"\nsubtitle: \"Coding basics and exploring `sf` objects\"\norder: 1\nstatus: Available\ndate-due: 2023-09-06\ndate-modified: last-modified\n---\n\n\n\n## Setup\n\nTo complete this exercise, you need to load two libraries that we already installed in class:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\n```\n:::\n\n\n\nYou also need data from the `{sf}` package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"), as_tibble = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Users/elipousson/Library/R/arm64/4.4/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n:::\n\n\n\n## Exercises\n\n### Coding basics\n\n*The exercises in this section are from [Ch. 3 Workflow: basics](https://r4ds.hadley.nz/workflow-basics.html) in R for Data Science (2e). If you have any trouble with the next couple exercises, please review the chapter before continuing to the next section.*\n\nWhy does this code not work?\n\nThis code does not work because there is no object called \"my_varıable\". It is a typo and should be \"my_variable\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable <- 10\nmy_varıable\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\nTweak each of the following R commands so that they run correctly:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibary(tidyverse)\n\nggplot(data = mpg) + \n  geom_point(maping = aes(x = displ, y = hwy)) +\n  geom_smooth(method = \"lm\")\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\nPress <kbd>⌥ + ⇧ + K</kbd> or <kbd>⎇ + ⇧ + K</kbd>.\n\nWhat happens? The shortcut opens the Keyboard Shortcut Quick Reference Overlay.\n\nHow can you get to the same place using the menus? Going to Tools > Keyboard Shortcuts Help. \n\n------------------------------------------------------------------------\n\n### Look up documentation\n\n`?` is an operator that you can use to pull up documentation on a function, dataset, or other topic in the Help tab pane of the [RStudio IDE](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html). For example, running the code: `?sf::st_read` will pull up the documentation on a set of functions for read simple features or layers from a file or database.\n\nUse `?` to access the documentation on `sf::st_geometry()` then look for the \"Value\" heading that provides information about the value returned by the function.\n\nWhat type of object does `sf::st_geometry()` return? an object of class sfc, a list-column with geometries\n\nWhat is one *other* function documented on the same page? `st_set_geometry()` or `st_drop_geometry()`\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\"}\nReview [Ch. 9 Workflow: getting help](https://r4ds.hadley.nz/workflow-help) in R for Data Science (2e) for more information about getting help when you struggle with a package, function, or project.\n:::\n\n### Explore `sf` and `sfc` objects\n\nEvery object in R has at least one class:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(\"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\nVectors, lists, data frames, and other objects can also have names and attributes. This is a named character vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(c(\"A\" = \"apple\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\"\n```\n\n\n:::\n:::\n\n\n\nA `sf` object is a `data.frame` but it also has a special `sf` class that is [designed to implement the formal simple features](https://r-spatial.github.io/sf/articles/sf1.html) standard in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\nAs a data frame, a `sf` object has column names (which you can access with `names()` or `colnames()`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"AREA\"      \"PERIMETER\" \"CNTY_\"     \"CNTY_ID\"   \"NAME\"      \"FIPS\"     \n [7] \"FIPSNO\"    \"CRESS_ID\"  \"BIR74\"     \"SID74\"     \"NWBIR74\"   \"BIR79\"    \n[13] \"SID79\"     \"NWBIR79\"   \"geometry\" \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nNext, we should run `st_geometry()` on `nc`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry <- st_geometry(nc)\n```\n:::\n\n\n\nNow, use `class()` to find out what type of object `st_geometry()` returned:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(nc_geometry)\n```\n:::\n\n\n\nThis object is a special type of list. You can subset one or more items from a list using a single or double set of square brackets like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 3...\n```\n\n\n:::\n\n```{.r .cell-code}\nnc_geometry[[1]]\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 36.27251, -81.56198 36.27359, -81.63306 36.34069, -81.74107 36.39178, -81.69828 36.47178, -81.7028 36.51934, -81.67 36.58965, -81.3453 36.57286, -81.34754 36.53791, -81.32478 36.51368, -81.31332 36.4807, -81.26624 36.43721, -81.26284 36.40504, -81.24069 36.37942, -81.23989 36.36536, -81.26424 36.35241, -81.32899 36.3635, -81.36137 36.35316, -81.36569 36.33905, -81.35413 36.29972, -81.36745 36.2787, -81.40639 36.28505, -81.41233 36.26729, -81.43104 36.26072, -81.45289 36.23959, -81.47276 36.23436)))\n```\n\n\n:::\n:::\n\n\n\nTake a look at the attributes for this list using `attributes()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(nc_geometry)\n```\n:::\n\n\n\nNow, use `class()` one more time to find out what type of objects make up `nc_geometry`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(nc_geometry[[1]])\n```\n:::\n\n\n\n----\n\n`summary()` is another way to get information about names and attributes all at once. Try using `summary()` on `nc_geometry`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nc_geometry)\n```\n:::\n\n\n\nReview the results and try to answer the following:\n\n-   What is the geometry type? MULTIPOLYGON\n-   What is the coordinate reference system? EPSG:4267\n-   How many features? 100\n\n### Visualize `sf` objects\n\nSome packages come with data we can use as soon as the package is loaded.\n\nLoad the `{spData}` packages using `library()` then make a plot of the `us_states` data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spData)\n\nplot(us_states)\n```\n:::\n\n\n\nCan you use `plot()` to make a map of states color-coded by region?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(us_states[, \"REGION\"])\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}