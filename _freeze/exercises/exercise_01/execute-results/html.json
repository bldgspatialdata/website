{
  "hash": "c2368a3bccbc84f2789c5116b66d5b3b",
  "result": {
    "markdown": "---\ntitle: \"Exercise 01\"\nsubtitle: \"Coding basics and exploring `sf` objects\"\norder: 1\nstatus: Available\ndate-due: 2023-09-06\ndate-modified: last-modified\n---\n\n\n::: {.callout-important appearance=\"minimal\" icon=\"true\"}\nExercise due on {{< meta date-due >}}\n:::\n\nℹ️ See [week {{< meta order >}}](https://bldgspatialdata.github.io/website/weeks/week_0{{< meta order >}}.html) for related slides and readings\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Practice these skills\n\n-   Confirm that you understand some coding basics\n-   Use the `?` operator to access function and package documentation\n-   Use `class()`, `names()`, `attributes()`, and `summary()` functions to explore `sf` and `sfc` objects\n-   Use the base `plot()` or `ggplot2::geom_sf()` function to visualize a `sf` object\n-   Bonus: use the `mapview::mapview()` function to look at data using an interactive map\n:::\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Think about these questions\n\n-   What are parts of a simple feature object? What may be some benefits or limitations of this data structure?\n-   What about using R helps with \"reproducibility\" compared to a desktop GIS?\n:::\n\n----\n\n## Setup\n\nTo complete this exercise, you need to load two libraries that we already installed in class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\n```\n:::\n\n\nYou also need data from the `{sf}` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"), as_tibble = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n:::\n\n\nYou *will* need the `{mapview}` and `{spData}` packages but don't load them yet. If they aren't installed, install them now using `{pak}` (a faster option than `install.packages()`).\n\nCopy the following lines (without the `#` character) into the console to install all three packages (don't forget to restart your session afterwards):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pak\")\n# pak::pkg_install(c(\"mapview\", \"spData\"))\n```\n:::\n\n\nThis week's exercise is mostly \"fill in the blank\" questions and coding exercises. You can expect fewer hints and more freedom to experiment in future exercises!\n\n## Exercises\n\n### Coding basics\n\n*The exercises in this section are from [Ch. 3 Workflow: basics](https://r4ds.hadley.nz/workflow-basics.html) in R for Data Science (2e). If you have any trouble with the next couple exercises, please review the chapter before continuing to the next section.*\n\nWhy does this code not work? ____\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable <- 10\nmy_varıable\n```\n:::\n\n\n------------------------------------------------------------------------\n\nTweak each of the following R commands so that they run correctly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nPress <kbd>⌥ + ⇧ + K</kbd> or <kbd>⎇ + ⇧ + K</kbd>.\n\nWhat happens? ____\n\nHow can you get to the same place using the menus? ____\n\n------------------------------------------------------------------------\n\n### Look up documentation\n\n`?` is an operator that you can use to pull up documentation on a function, dataset, or other topic in the Help tab pane of the [RStudio IDE](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html). For example, running the code: `?sf::st_read` will pull up the documentation on a set of functions for read simple features or layers from a file or database.\n\nUse `?` to access the documentation on `sf::st_geometry()` then look for the \"Value\" heading that provides information about the value returned by the function.\n\nWhat type of object does `sf::st_geometry()` return? \\_\\_\\_\\_\n\nWhat is one *other* function documented on the same page? \\_\\_\\_\\_\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\nReview [Ch. 9 Workflow: getting help](https://r4ds.hadley.nz/workflow-help) in R for Data Science (2e) for more information about getting help when you struggle with a package, function, or project.\n:::\n\n### Explore `sf` and `sfc` objects\n\nEvery object in R has at least one class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(\"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\nVectors, lists, data frames, and other objects can also have names and attributes. This is a named character vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(c(\"A\" = \"apple\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\"\n```\n\n\n:::\n:::\n\n\nA `sf` object is a `data.frame` but it also has a special `sf` class that is [designed to implement the formal simple features](https://r-spatial.github.io/sf/articles/sf1.html) standard in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nAs a data frame, a `sf` object has column names (which you can access with `names()` or `colnames()`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"AREA\"      \"PERIMETER\" \"CNTY_\"     \"CNTY_ID\"   \"NAME\"      \"FIPS\"     \n [7] \"FIPSNO\"    \"CRESS_ID\"  \"BIR74\"     \"SID74\"     \"NWBIR74\"   \"BIR79\"    \n[13] \"SID79\"     \"NWBIR79\"   \"geometry\" \n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nNext, we should run `st_geometry()` on `nc`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry <- st_geometry(nc)\n```\n:::\n\n\nNow, use `class()` to find out what type of object `st_geometry()` returned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____\n```\n:::\n\n\nThis object is a special type of list. You can subset one or more items from a list using a single or double set of square brackets like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 3...\n```\n\n\n:::\n\n```{.r .cell-code}\nnc_geometry[[1]]\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 36.27251, -81.56198 36.27359, -81.63306 36.34069, -81.74107 36.39178, -81.69828 36.47178, -81.7028 36.51934, -81.67 36.58965, -81.3453 36.57286, -81.34754 36.53791, -81.32478 36.51368, -81.31332 36.4807, -81.26624 36.43721, -81.26284 36.40504, -81.24069 36.37942, -81.23989 36.36536, -81.26424 36.35241, -81.32899 36.3635, -81.36137 36.35316, -81.36569 36.33905, -81.35413 36.29972, -81.36745 36.2787, -81.40639 36.28505, -81.41233 36.26729, -81.43104 36.26072, -81.45289 36.23959, -81.47276 36.23436)))\n```\n\n\n:::\n:::\n\n\nTake a look at the attributes for this list using `attributes()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____(nc_geometry)\n```\n:::\n\n\nNow, use `class()` one more time to find out what type of objects make up `nc_geometry`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____(nc_geometry[[1]])\n```\n:::\n\n\n----\n\n`summary()` is another way to get information about names and attributes all at once. Try using `summary()` on `nc_geometry`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(____)\n```\n:::\n\n\nReview the results and try to answer the following:\n\n-   What is the geometry type? \\_\\_\\_\\_\n-   What is the coordinate reference system? \\_\\_\\_\\_\n-   How many features? \\_\\_\\_\\_\n\n### Visualize `sf` objects\n\nSome packages come with data we can use as soon as the package is loaded.\n\nLoad the `{spData}` packages using `library()` then make a plot of the `us_states` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(____)\n\nplot(____)\n```\n:::\n\n\nCan you use `plot()` to make a map of states color-coded by region?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(____)\n```\n:::\n\n\nCan you make a map of `us_states` using `ggplot()` and `geom_sf()`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf()\n```\n:::\n\n\nCan you make a map `us_states` you made with `geom_sf()` and have states are color-coded by total population in 2015?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(aes(fill = ____))\n```\n:::\n\n\nTake a look at the documentation for `ggplot2::geom_sf()` for examples if you get stuck. You can also use `names()` or `summary()` with `us_states` to find out the column names of the different attributes.\n\n## Bonus exercise\n\n### Interactive mapping\n\nFor the bonus exercise, we are using [Maryland Transit Administration Bus Stops](https://data.imap.maryland.gov/datasets/maryland::baltimore-county-maintained-roads/explore) data from Maryland iMap portal. The data is published as an ArcGIS Feature Layer (a type of [Web Map Service](https://en.wikipedia.org/wiki/Web_Map_Service) or WMS). The service allows us to access the data in a few different formats including as a [GeoJSON file](https://en.wikipedia.org/wiki/GeoJSON).\n\nI went ahead and pulled the URL to use for this exercise. `{sf}` is able to read the data using [GDAL](https://gdal.org/user/virtual_file_systems.html) (the Geospatial Data Abstraction Library). GDAL has a feature known as the [virtual file system](https://gdal.org/user/virtual_file_systems.html#gdal-virtual-file-systems-compressed-network-hosted-etc-vsimem-vsizip-vsitar-vsicurl) that allows it to read from a URL (see [\"vsicurl\"](https://gdal.org/user/virtual_file_systems.html#vsicurl-http-https-ftp-files-random-access) for details).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndsn <- \"https://geodata.md.gov/imap/rest/services/Transportation/MD_Transit/FeatureServer/9/query?outFields=*&where=1%3D1&f=geojson\"\n```\n:::\n\n\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"true\"}\n### About GDAL and other sf dependencies\nGDAL is one of the major open source projects that \"powers\" the `{sf}` package along with GEOS, PROJ, and udunits2. Geocomputation with R [explains these dependencies](https://r.geocompx.org/spatial-class#vector-data):\n\n-   [GDAL](https://gdal.org/), for reading, writing and manipulating a wide range of geographic data formats,\n-   [PROJ](https://proj.org/), a powerful library for coordinate system transformations\n-   [GEOS](https://libgeos.org/), a planar geometry engine for operations such as calculating buffers and centroids on data with a projected CRS\n-   [S2](https://s2geometry.io/), a spherical geometry engine written in C++ developed by Google\n:::\n\n---\n\nCombine `st_read()` and the assignment operator `<-` to read the URL from `dsn` and create a new `sf` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stops ____ ____\n```\n:::\n\n\n----\n\n:::{.callout-warning collapse=false appearance='default' icon=true}\n#### Exercise Update (2023-09-04)\nWhile `mapview()` can display the `bus_stop` data interactively, I've discovered that it won't work when you render the Quarto document. To avoid confusion, I've updated the last two code blocks to use the setting `eval: false` (turning off evaluation when the document is rendered). [Execution options](https://quarto.org/docs/computations/execution-options.html) are a more advanced topic we cover later in this course.\n:::\n\nLoad the `{mapview}` library and then use the `mapview()` function to create an interactive map of the new `bus_stops` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____\n\n____\n```\n:::\n\n\nExplore the documentation for `mapview()` by running `?mapview::mapview` in your console. Read the help page to see how you can customize your interactive map.\n\nIf you want a guided tour of the package, check out this [recorded 2020 tutorial on YouTube](https://www.youtube.com/watch?v=hUzVvGezwo8) with Tim Appelhans (who created mapview in 2016 with [grant support from the R Consortium](https://www.r-consortium.org/all-projects/awarded-projects/2016-group-2)).\n\nCan you create another interactive map that is color-coded by one of the attributes in `bus_stops`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n_____\n```\n:::\n",
    "supporting": [
      "exercise_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}