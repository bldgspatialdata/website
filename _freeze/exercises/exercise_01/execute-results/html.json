{
  "hash": "18c36edb77185c43cbe4ae4fecd12172",
  "result": {
    "markdown": "---\ntitle: \"Exercise 01\"\norder: 1\nstatus: Available\ndate-due: 2023-09-04\ndate-modified: last-modified\n---\n\n\n::: {.callout-important appearance=\"minimal\" icon=\"true\"}\nExercise due on {{< meta date-due >}}\n:::\n\nℹ️ See [week {{< meta order >}}](../weeks/week_0{{< meta order >}}.html) for related slides and readings\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Practice these skills\n\n-   Confirm that you understand some coding basics\n-   Use the `?` operator to access function and package documentation\n-   Use `class()`, `names()`, or `summary()` functions to get information about objects in R\n-   Use the base `plot()` or `ggplot2::geom_sf()` function to visualize a sf object\n-   Bonus: use the `mapview::mapview()` function to look at data using an interactive map\n:::\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Think about these questions\n\n-   What are parts of a simple feature object? What are the benefits and the limitations of this format?\n-   What are some advantages or disadvantages of using R for reproducible data analysis compared to a desktop GIS?\n:::\n\n----\n\n## Setup\n\nTo complete this exercise, you need two libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\n```\n:::\n\n\nYou also need data included with the `{sf}` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n```\n:::\n\n\nYou are also need the `{mapview}` and `{spData}` packages but don't load them yet.\n\n## Exercises\n\n### Coding basics\n\n*The exercises in this section are from [Ch. 3 Workflow: basics](https://r4ds.hadley.nz/workflow-basics.html) in R for Data Science (2e). If you have any trouble with the next couple exercises, please review the chapter before continuing to the next section.*\n\nWhy does this code not work?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable <- 10\nmy_varıable\n```\n:::\n\n\n------------------------------------------------------------------------\n\nTweak each of the following R commands so that they run correctly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nPress <kbd>⌥ + ⇧ + K</kbd> or <kbd>⎇ + ⇧ + K</kbd>. What happens? How can you get to the same place using the menus?\n\n------------------------------------------------------------------------\n\n### Look up documentation\n\nThe `?` is a function for accessing documentation on a function, dataset, or other topic. For example, executing the code: `?sf::st_read` will pull up the documentation on functions to read simple features or layers from file or database.\n\nUse `?` to access the documentation on `sf::st_geometry()` then look for the \"Value\" heading that provides information about the value returned by the function.\n\nWhat type of object does `sf::st_geometry()` return? Fill in the blank or paraphrase the description.\n\n`sf::st_geometry()` returns a \\_\\_\\_\\_ object.\n\nWhat is one *other* function documented on the same page? \\_\\_\\_\\_\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"true\"}\nReview [Ch. 9 Workflow: getting help](https://r4ds.hadley.nz/workflow-help) in R for Data Science (2e) for more information about getting help when you struggle with a package, function, or project.\n:::\n\n### Access object classes, names, and attributes\n\nThe `class()` and `names()` functions return basic information about an object in R.\n\nUse `class()` to check the class of the output from `st_geometry()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry <- st_geometry(nc)\n```\n:::\n\n\n----\n\nGet the `names()` for the `nc` object and the `nc_geometry` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(____)\n\nnames(____)\n```\n:::\n\n\nCan you explain the difference between the two results?\n\n----\n\n`summary()` can help get more information about an object.\n\nUse `summary()` on `nc_geometry`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(____)\n```\n:::\n\n\nReview the results and try to answer the following:\n\n-   What is the geometry type? \\_\\_\\_\\_\n-   What is the coordinate reference system? \\_\\_\\_\\_\n-   How many features? \\_\\_\\_\\_\n\n### Plot a `sf` object\n\nSome packages come with data we can use as soon as the package is loaded.\n\nLoad the `{spData}` packages using `library()` then make a plot of the `us_states` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(____)\n\nplot(____)\n```\n:::\n\n\nCan you update the plot of `us_states` to show a map of states by region?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(____)\n```\n:::\n\n\nCan you make a map of `us_states` using `ggplot()` and `geom_sf()`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf()\n```\n:::\n\n\nCan you update the map of `us_states` you made with `geom_sf()` so states are color-coded by total population in 2015? Take a look at the documentation for `ggplot2::geom_sf()` for examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf()\n```\n:::\n\n\nIf you get stuck, try using `names()` or `summary()` to take a look at `us_states` to find out the column names for region or total population in 2015.\n\n## Bonus exercise\n\n### Interactive mapping\n\nWe should first get a URL for the [Baltimore County Maintained Roads data](https://data.imap.maryland.gov/datasets/maryland::baltimore-county-maintained-roads/explore) from Maryland iMap a path to the GeoPackage file in your repository.\n\nI already pulled the URL to use for this exercise and prepped it for reading with a [\"vsicurl\" prefix](https://gdal.org/user/virtual_file_systems.html#vsicurl-http-https-ftp-files-random-access) that allows us to use the [virtual file systems](https://gdal.org/user/virtual_file_systems.html#gdal-virtual-file-systems-compressed-network-hosted-etc-vsimem-vsizip-vsitar-vsicurl) built into the [Geospatial Data Abstraction Library](https://gdal.org/user/virtual_file_systems.html) or GDAL.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/Baltimore_County_Maintained_Roads/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\"\n\nurl <- paste0(\"/vsicurl/\" , url)\n```\n:::\n\n\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"true\"}\n### About GDAL and other sf dependencies\nGDAL is one of the major open source projects that \"powers\" the `{sf}` package along with GEOS, PROJ, and udunits2. Geocomputation with R [explains these dependencies](https://r.geocompx.org/spatial-class#vector-data):\n\n-   [GDAL](https://gdal.org/), for reading, writing and manipulating a wide range of geographic data formats,\n\n-   [PROJ](https://proj.org/), a powerful library for coordinate system transformations\n\n-   [GEOS](https://libgeos.org/), a planar geometry engine for operations such as calculating buffers and centroids on data with a projected CRS\n\n-   [S2](https://s2geometry.io/), a spherical geometry engine written in C++ developed by Google\n:::\n\n---\n\nNext, use `st_read()` and the assignment operator `<-` to load the file into a `sf` object named \\`roads\\`\\`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- ____\n```\n:::\n\n\n---\n\nLoad the `{mapview}` library and then use the `mapview()` function to create an interactive map of the `roads` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n_____\n_____\n```\n:::\n\n\nExplore the setting for `mapview()` and create a custom map using `roads` or other data from this exercise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n_____\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}