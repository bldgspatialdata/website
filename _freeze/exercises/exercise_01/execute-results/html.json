{
  "hash": "9391d8e7064faa927b925984b6c6ce18",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 01\"\nsubtitle: \"Coding basics and exploring `sf` objects\"\norder: 1\nstatus: available\ndate-due: 2024-09-06\ndate-modified: last-modified\nerror: true\n---\n\n\n\n\n::: callout-tip\n## Practice these skills\n\n-   Confirm that you understand some coding basics\n-   Use the `?` operator to access function and package documentation\n-   Use `class()`, `names()`, `attributes()`, and `summary()` functions to explore `sf` and `sfc` objects\n-   Use the base `plot()` function to visualize a `sf` object\n:::\n\n----\n\n## Getting started\n\n### Packages\n\nYou need the `{sf}`, `{tidyverse}`, and `{spData}` packages installed to complete this exercise. If they aren't installed, install them now by copying the following lines into the console to install all three packages (don't forget to restart your session afterwards):\n\n```\ninstall.packages(c(\"tidyverse\", \"sf\", \"spData\"))\n```\n\nAfter restarting make sure to load the `sf` and `tidyverse` library:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n:::\n\n\n\n\n### Datas\n\nThis exercise uses the `nc` North Carolina SIDS dataset that is included with the sf package. We can use the `sf::st_read()` function to load it from a shapefile:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), as_tibble = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Users/elipousson/Library/R/arm64/4.4/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n:::\n\n\n\n\n## Exercises\n\nThis week's exercise is mostly \"fill in the blank\" questions and coding exercises. You can expect fewer hints and more freedom to experiment in future exercises!\n\nThere are periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub as you complete the exercise. You should have at least three commits with meaningful commit messages by the end of the assignment. Take a look at the [RStudio documentation on version control](https://docs.posit.co/ide/user/ide/guide/tools/version-control.html#getting-started) for more details on how to commit and push changes.\n\n### Coding basics\n\n*The exercises in this section are from [Ch. 3 Workflow: basics](https://r4ds.hadley.nz/workflow-basics.html) in R for Data Science (2e). If you have any trouble with the next couple exercises, please review the chapter before continuing to the next section.*\n\nWhy does this code not work? ____\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_variable <- 10\nmy_varıable\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\nTweak each of the following R commands so that they run correctly:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\nPress <kbd>⌥ + ⇧ + K</kbd> or <kbd>⎇ + ⇧ + K</kbd>.\n\nWhat happens? ____\n\nHow can you get to the same place using the menus? ____\n\n------------------------------------------------------------------------\n\n::: callout-tip\nRender, commit, and push your changes to GitHub with the commit message \"Added answers for coding basics questions\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Look up documentation\n\n`?` is an operator that you can use to pull up documentation on a function, dataset, or other topic in the Help tab pane of the [RStudio IDE](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html). For example, running the code: `?sf::st_read` will pull up the documentation on a set of functions for read simple features or layers from a file or database.\n\nUse `?` to access the documentation on `sf::st_geometry()` then look for the \"Value\" heading that provides information about the value returned by the function.\n\nWhat type of object does `sf::st_geometry()` return? \\_\\_\\_\\_\n\nWhat is one *other* function documented on the same page? \\_\\_\\_\\_\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\"}\nReview [Ch. 9 Workflow: getting help](https://r4ds.hadley.nz/workflow-help) in R for Data Science (2e) for more information about getting help when you struggle with a package, function, or project.\n:::\n\n### Explore `sf` and `sfc` objects\n\nEvery object in R has at least one class:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(\"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\nVectors, lists, data frames, and other objects can also have names and attributes. This is a named character vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(c(\"A\" = \"apple\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\"\n```\n\n\n:::\n:::\n\n\n\n\nA `sf` object is a `data.frame` but it also has a special `sf` class that is [designed to implement the formal simple features](https://r-spatial.github.io/sf/articles/sf1.html) standard in R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nAs a data frame, a `sf` object has column names (which you can access with `names()` or `colnames()`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"AREA\"      \"PERIMETER\" \"CNTY_\"     \"CNTY_ID\"   \"NAME\"      \"FIPS\"     \n [7] \"FIPSNO\"    \"CRESS_ID\"  \"BIR74\"     \"SID74\"     \"NWBIR74\"   \"BIR79\"    \n[13] \"SID79\"     \"NWBIR79\"   \"geometry\" \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\nNext, we should run `st_geometry()` on `nc`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry <- st_geometry(nc)\n```\n:::\n\n\n\n\nNow, use `class()` to find out what type of object `st_geometry()` returned:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____\n```\n:::\n\n\n\n\nThis object is a special type of list. You can subset one or more items from a list using a single or double set of square brackets like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_geometry[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 3...\n```\n\n\n:::\n\n```{.r .cell-code}\nnc_geometry[[1]]\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 36.27251, -81.56198 36.27359, -81.63306 36.34069, -81.74107 36.39178, -81.69828 36.47178, -81.7028 36.51934, -81.67 36.58965, -81.3453 36.57286, -81.34754 36.53791, -81.32478 36.51368, -81.31332 36.4807, -81.26624 36.43721, -81.26284 36.40504, -81.24069 36.37942, -81.23989 36.36536, -81.26424 36.35241, -81.32899 36.3635, -81.36137 36.35316, -81.36569 36.33905, -81.35413 36.29972, -81.36745 36.2787, -81.40639 36.28505, -81.41233 36.26729, -81.43104 36.26072, -81.45289 36.23959, -81.47276 36.23436)))\n```\n\n\n:::\n:::\n\n\n\n\nTake a look at the attributes for this list using `attributes()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____(nc_geometry)\n```\n:::\n\n\n\n\nNow, use `class()` one more time to find out what type of objects make up `nc_geometry`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____(nc_geometry[[1]])\n```\n:::\n\n\n\n\n----\n\n`summary()` is another way to get information about names and attributes all at once. Try using `summary()` on `nc_geometry`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(____)\n```\n:::\n\n\n\n\nReview the results and try to answer the following:\n\n-   What is the geometry type? \\_\\_\\_\\_\n-   What is the coordinate reference system? \\_\\_\\_\\_\n-   How many features? \\_\\_\\_\\_\n\n::: callout-tip\nNow is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.\n\nOnce again, make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Visualize `sf` objects\n\nSome packages come with data we can use as soon as the package is loaded.\n\nLoad the `{spData}` packages using `library()` then make a plot of the `us_states` data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(____)\n\nplot(____)\n```\n:::\n\n\n\n\nCan you use `plot()` to make a map of states color-coded by region?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(____)\n```\n:::\n\n\n\n\n**Optional:** can you use `ggplot()` and `geom_sf()` to create a plot of `us_states` color-coded by total population in 2015? Here is part of the code to start with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf()\n```\n:::\n\n\n\n\n::: callout-tip\nRender, commit, and push your final changes to GitHub with a meaningful commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}