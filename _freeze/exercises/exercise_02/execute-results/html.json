{
  "hash": "b1c50521ec05800dd986af41142777a8",
  "result": {
    "markdown": "---\ntitle: \"Exercise 02\"\norder: 2\nstatus: WIP\ndate-due: 2023-09-11\ndate-modified: last-modified\n---\n\n\n::: {.callout-note appearance=\"minimal\" icon=\"true\"}\n#### {{< meta status >}}\nThis exercise is a work-in-progress. Please wait for this status message to be removed before getting started.\n:::\n\n::: {.callout-important appearance=\"minimal\" icon=\"true\"}\nExercise due on {{< meta date-due >}}\n:::\n\nℹ️ See [week {{< meta order >}}](https://bldgspatialdata.github.io/website/weeks/week_0{{< meta order >}}.html) for related slides and readings\n\n## Overview\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(sf)\n```\n:::\n\n\nOne advantage of using `{ggplot2}` over a map-making focused package like `{tmap}` is the wide variety of extension packages created by the large community of users and developers making data visualizations (including maps) with `{ggplot2}`.\n\nFor this exercise, we are going to use the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(c(\"ggrepel\", \"cols4all\", \"patchwork\", \"ggtext\", \"spDataLarge\"))\n```\n:::\n\n\nWe are also going to demonstrate a few advanced features. You won't need to do anything with these packages but you need them installed to see the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(c(\"ggdist\", \"geomtextpath\", \"plotly\", \"smoothr\"))\n```\n:::\n\n\n## Exercises\n\n### Visualizing one variable\n\nWorking with `geom_bar()` with one discrete variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_bar(aes(x = ____))\n```\n:::\n\n\nWorking with `geom_dotplot()` with one continuous variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_dotplot()\n```\n:::\n\n\nWorking with `geom_sf()` with one continuous variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(aes(size = ____))\n```\n:::\n\n\nWorking with `geom_sf()` with one discrete variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(aes(color = ____))\n```\n:::\n\n\n### Visualizing two variables\n\nUsing `geom_col()` with one discrete and one continuous variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_col(aes(____))\n```\n:::\n\n\nUsing `geom_sf()` and `facet_wrap()` with one discrete and one continuous variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(aes(fill = ____)) +\n  facet_wrap(~ ____)\n```\n:::\n\n\n### Using scales and colors\n\nUsing the viridis scales for a dot plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_dotplot() +\n  scale_color_viridis_c()\n```\n:::\n\n\nUsing the [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) scales with color:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(aes(color = ____)) +\n  scale_color_brewer()\n```\n:::\n\n\nThe same with fill:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(aes(fill = ____)) +\n  scale_fill_brewer()\n```\n:::\n\n\nThe same with a continuous variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(aes(fill = ____)) +\n  scale_fill_distiller()\n```\n:::\n\n\n### Adding labels, legends, and themes\n\nUsing the `labs()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(aes(fill = ____)) +\n  labs(\n    title = ____,\n    caption = ____,\n    fill = ____\n  )\n```\n:::\n\n\n### Map making with `{ggplot2}`\n\nHiding graticules with `theme_void()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(color = \"black\", fill = NA) +\n  theme_void()\n```\n:::\n\n\nHiding [graticules](https://en.wikipedia.org/wiki/Graticule_(cartography)) with `theme()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(color = \"black\", fill = NA) +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n```\n:::\n\n\n\"Zooming\" into an area with `coord_sf()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____) +\n  geom_sf(color = \"black\", fill = NA) +\n  coord_sf()\n```\n:::\n\n\nAdding inset maps with `{patchwork}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_map <- ggplot(data = ____) +\n  geom_sf(color = \"black\", fill = NA)\n\ninset_map <- ggplot(data = ____) +\n  geom_sf(color = \"black\", fill = NA) +\n  coord_sf()\n\narea_map +\n  patchwork::inset_element(\n    inset_map,\n    left = ____,\n    bottom = ____,\n    top = ____,\n    right = ____\n  )\n```\n:::\n\n\nSmoothing features with `{smoothr}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- ____\nsmooth_data <- smoothr::smooth(data, method = \"ksmooth\", smoothness = ____)\n\nggplot() +\n  geom_sf(\n    data = data,\n    color = \"red\"\n    ) +\n  geom_sf(\n    data = smooth_data,\n    color = \"blue\"\n  ) +\n  theme_void()\n```\n:::\n\n\n## Bonus exercise\n\n### Creating maps with `{tmap}`\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "exercise_02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}