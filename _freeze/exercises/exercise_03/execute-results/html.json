{
  "hash": "16434b40f412ab3bc2334d36c305524c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 03\"\norder: 3\nstatus: Available\ndate-due: 2023-09-18\ndate-modified\t: last-modified\n---\n\n\n\n\n::: {.callout-important appearance=\"minimal\" icon=\"true\"}\nExercise due on {{< meta date-due >}}\n:::\n\nℹ️ See [week\n{{< meta order >}}](../weeks/week__0{{< meta order >}}.qmd) for related slides and readings\n\n## Overview\n\nThis week's exercise comes directly from [the data transformation\nchapter](https://r4ds.hadley.nz/data-transform) of R for Data Science.\nMore typically, our exercises will always include spatial data but I\nwanted to use a more tried and tested exercise for this week's material.\n\n## Setup\n\nIf you don't already have the `{nycflights13}` package installed, go ahead and install it then restart before continuing with the exercise.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"nycflights13\")\n```\n:::\n\n\n\n\nIn addition to nycflights13, you will also need `{dplyr}` and `{ggplot2}`. Load the tidyverse library to make sure you have everything you need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Exercises\n\n### Working with rows\n\nIn a single pipeline for each condition, find all flights that meet the\ncondition:\n\n-   Had an arrival delay of two or more hours\n-   Flew to Houston (`IAH` or `HOU`)\n-   Were operated by United, American, or Delta\n-   Departed in summer (July, August, and September)\n-   Arrived more than two hours late, but didn't leave late\n-   Were delayed by at least an hour, but made up over 30 minutes in\n    flight\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nSort `flights` to find the flights with longest departure delays. Find\nthe flights that left earliest in the morning.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(____)\n```\n:::\n\n\n\n\nSort `flights` to find the fastest flights. (Hint: Try including a math\ncalculation inside of your function.)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nWas there a flight on every day of 2013?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nWhich flights traveled the farthest distance? Which traveled the least\ndistance?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nDoes it matter what order you used\n[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and\n[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if\nyou're using both? Why/why not? Think about the results and how much\nwork the functions would have to do.\n\n\\_\\_\\_\\_\n\n### Working with columns\n\nCompare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you\nexpect those three numbers to be related?\n\n\\_\\_\\_\\_\n\nBrainstorm as many ways as possible to select `dep_time`, `dep_delay`,\n`arr_time`, and `arr_delay` from `flights`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, ____)\n```\n:::\n\n\n\n\nWhat happens if you specify the name of the same variable multiple times\nin a [`select()`](https://dplyr.tidyverse.org/reference/select.html)\ncall?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, ____)\n```\n:::\n\n\n\n\nWhat does the\n[`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html)\nfunction do? Why might it be helpful in conjunction with this vector?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables <- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n```\n:::\n\n\n\n\nDoes the result of running the following code surprise you? How do the\nselect helpers deal with upper and lower case by default? How can you\nchange that default?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(contains(\"TIME\"))\n```\n:::\n\n\n\n\nRename `air_time` to `air_time_min` to indicate units of measurement and\nmove it to the beginning of the data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  rename(____)\n```\n:::\n\n\n\n\nWhy doesn't the following work, and what does the error mean?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(tailnum) |> \n  arrange(arr_delay)\n```\n:::\n\n\n\n\n### Working with groups\n\nWhich carrier has the worst average delays? Challenge: can you\ndisentangle the effects of bad airports vs. bad carriers? Why/why not?\n(Hint: think about\n`flights |> group_by(carrier, dest) |> summarize(n())`)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nFind the flights that are most delayed upon departure from each\ndestination.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  ____\n```\n:::\n\n\n\n\nHow do delays vary over the course of the day. Illustrate your answer\nwith a plot.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and\nfriends?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_min(flights, ____)\n```\n:::\n\n\n\n\nExplain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in\nterms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(flights, ____)\n\ncount(flights, ____, sort = ____)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}