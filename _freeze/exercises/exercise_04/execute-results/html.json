{
  "hash": "1efe92eb31740ff314139b9f63bfc9ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 04\"\norder: 4\ndate-due: 2023-10-03\ndate-modified: last-modified\n---\n\n\n\n\n\n\n## Overview\n\nThis week's exercises are excerpted from [Ch. 3](https://r.geocompx.org/attr), [Ch. 4](https://r.geocompx.org/spatial-operations#exercises-2), and [Ch. 5](https://r.geocompx.org/geometry-operations#exercises-3) in Geocomputation with R.\n\nThese exercises build on our last exercise using `{dplyr}` and include some of the same skills including:\n\n-   Filtering rows or observations\n-   Grouping and summarizing data by variable\n\nNew skills you will practice with this exercise include:\n\n-   Using non-spatial joins for data frames\n-   Computing geometric measurements\n-   Using spatial filters\n-   Using geometric operations on a simple feature geometry set\n-   Using geometric operations on pairs of simple feature geometries\n\n## Setup\n\nThis exercise uses the `sf` and `tidyverse` packages:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\n```\n:::\n\n\n\n\n\n\nWe are also going to use the `us_states` and `us_states_df` data from the `{spData}` package:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spData)\n```\n:::\n\n\n\n\n\n\nNote that the `us_states` loaded for this exercise is different than the `us_states` we created during class with the `tigris::states()` function. For this exercise, the bonus exercises are mixed in with the other questions but you are welcome to skip them if you do not want go for the bonus part of the exercise.\n\n## Exercises\n\n### Filtering data\n\nFind all states that belong to the West region, have an area below 250,000 km2and in 2015 a population greater than 5,000,000 residents (**Hint:** you may need to use the function `units::set_units()` or `as.numeric()`).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |> \n  ____\n```\n:::\n\n\n\n\n\n\nFind all states that belong to the South region, had an area larger than 150,000 km2 or a total population in 2015 larger than 7,000,000 residents.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |> \n  ____\n```\n:::\n\n\n\n\n\n\n::: callout-tip\nRender, commit, and push your changes to GitHub with the commit message \"Added answers for filtering data questions\".\n:::\n\n### Joining and summarizing data\n\nWhat was the total population in 2015 in the `us_states` dataset? What was the minimum and maximum total population in 2015?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |> \n  ____\n```\n:::\n\n\n\n\n\n\nAdd variables from `us_states_df` to `us_states`, and create a new object called `us_states_stats`.\n\n-   What function did you use and why?\n-   Which variable is the key in both datasets?\n-   What is the class of the new object?\n\n**Tip:** we are covering joins in more detail next week---check out [the R for Data Science chapter on Joins](https://r4ds.hadley.nz/joins) for more information.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states_stats <- us_states |> \n  ____\n```\n:::\n\n\n\n\n\n\n`us_states_df` has two more rows than `us_states`. How can you find them?\n\n**Hint:** try to use the `dplyr::anti_join()` function.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n____(us_states, us_states_df)\n```\n:::\n\n\n\n\n\n\nHow much has population density changed between 2010 and 2015 in each state?\n\nCalculate the change in percentages and map them with `plot()` or `geom_sf()`:\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nCalculate the change in the number of residents living below the poverty level between 2010 and 2015 for each state.\n\n**Hint:** See `?us_states_df` for documentation on the poverty level columns.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n**Optional:** Calculate the change in the percentage of residents living below the poverty level in each state.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nWhat was the minimum, average and maximum state's number of people living below the poverty line in 2015 for each region?\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n**Optional:** What is the region with the largest increase in people living below the poverty line?\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n### Spatial operations\n\nSection [4.2](https://r.geocompx.org/spatial-operations#spatial-vec) (in Geocomputation with R) established that Canterbury was the region of New Zealand containing most of the 100 highest points in the country.\n\nHow many of these high points does the Canterbury region contain?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncanterbury <- nz |>\n  filter(Name == \"Canterbury\")\n\nnz_height |> \n  ____\n```\n:::\n\n\n\n\n\n\n**Optional:** plot the result using the `ggplot2::geom_sf()` function to show all of New Zealand, `canterbury` region highlighted in yellow, high points in Canterbury represented by red crosses (**Hint:** try using `shape = 7`) and high points in other parts of New Zealand represented by blue circles.\n\nSee the help page `?ggplot2::shape` and run the examples to see an illustration of different `shape` values.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nWhich region has the second highest number of `nz_height` points, and how many does it have?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnz_height |> \n  ____\n```\n:::\n\n\n\n\n\n\nGeneralizing the question to all regions: how many of New Zealand's 16 regions contain points which belong to the top 100 highest points in the country? Which regions?\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n**Optional:** create a table listing these regions in order of the number of points and their name. Hint: use `dplyr::slice_max()` and `gt::gt()`.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nUsing [`st_buffer()`](https://r-spatial.github.io/sf/reference/geos_unary.html), how many points in `nz_height` are within 100 km of Canterbury?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncanterbury_area <- st_buffer(canterbury, dist = ____)\n\nnz_height |> \n  ____\n```\n:::\n\n\n\n\n\n\n::: callout-tip\nRender, commit, and push your changes to GitHub again with a second informative commit message.\n:::\n\n### Spatial predicates\n\nTest your knowledge of spatial predicates by finding out and plotting how US states relate to each other and other spatial objects.\n\nThe starting point of this part of the exercise is to create an object representing Maryland state in the USA using the [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function and plot the resulting object in the context of US states.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaryland <- filter(____, ____)\n\nggplot() +\n  geom_sf(data = us_states) +\n  geom_sf(data = ____)\n```\n:::\n\n\n\n\n\n\nCreate a new object representing all the states that geographically intersect with Maryland and plot the result (hint: the most concise way to do this is with the subsetting method `[` but you can also use `sf::st_filter()`).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates_intersecting_md <- ____\n```\n:::\n\n\n\n\n\n\nCreate another object representing all the objects that touch (have a shared boundary with) Maryland and plot the result.\n\n**Hint:** remember you can use the argument `op = st_intersects` when subsetting with base R or `.predicate = st_intersects` when using `st_filter()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates_touching_md <- ____\n```\n:::\n\n\n\n\n\n\n**Optional:** create a straight line from the centroid of Maryland to the centroid of California near the West coast of the USA (hint: functions [`st_centroid()`](https://r-spatial.github.io/sf/reference/geos_unary.html), [`st_union()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and [`st_cast()`](https://r-spatial.github.io/sf/reference/st_cast.html) described in Chapter 5 may help) and identify which states this long East-West line crosses.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nHow far is the geographic centroid of Maryland from the geographic centroid of Canterbury, New Zealand?\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nCalculate the perimeter of the boundary lines of US states in meters. Which state has the longest border and which has the shortest?\n\n**Hint:** `st_perimeter` is a recent addition to `{sf}` that works with `POLYGON` or `MULTIPOLYGON` geometry. If you use `st_length`, make sure you convert your data to `LINESTRING` or `MULTILINESTRING` geometry.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |> \n  ____\n```\n:::\n\n\n\n\n\n\n### Tidy data\n\n`us_states_df` has information on median income and poverty in a \"wide\" format. Pivot the data into a long format using `tidyr::pivot_longer()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states_df |> \n  pivot_longer(\n    cols = ____\n  )\n```\n:::\n\n\n\n\n\n\nWhy could it be useful to have this data in a wide format?\n\n**Optional:** By default, the new \"name\" created by `pivot_longer()` contains the existing column names. Try using the `names_pattern` or `names_transform` arguments to create a separate year and variable column:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states_df |> \n  pivot_longer(\n    cols = ____,\n    ____\n  )\n```\n:::\n\n\n\n\n\n\nThe last question is from [Ch. 5 Data Tidying from R4DS](https://r4ds.hadley.nz/data-tidy.html). For this question, we are using a handful of sample tables included with the `{tidyr}` package:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1\n\ntable2\n\ntable3\n```\n:::\n\n\n\n\n\n\nSketch out the process you’d use to calculate the rate for `table2` and `table3`. You will need to perform four operations:\n\n1. Extract the number of TB cases per country per year.\n2. Extract the matching population per country per year.\n3. Divide cases by population, and multiply by 10000.\n4. Store back in the appropriate place.\n\nYou haven’t yet learned all the functions you’d need to actually perform these operations, but you should still be able to think through the transformations you’d need.\n\n::: callout-tip\nDon't forget to render, commit, and push your changes to GitHub one last time with an informative commit message.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}