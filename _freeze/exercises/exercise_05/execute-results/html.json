{
  "hash": "e2ed74abb71cd16d75f39d5d9909dd0b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 05\"\norder: 5\ndate-due: 2024-10-23\ndate-modified: last-modified\n---\n\n\n\n\n::: {.callout-important appearance=\"minimal\"}\nExercise due on {{< meta date-due >}}\n:::\n\nℹ️ See [week {{< meta order >}}](https://bldgspatialdata.github.io/website/weeks/week_0{{< meta order >}}.html) for related slides and readings\n\n## Overview\n\nThis week's exercises are excerpted from [Ch. 25 Functions](https://r4ds.hadley.nz/functions.html) in R for Data Science. This exercise is practice for writing three types of functions:\n\n-   Mutate (or vector) functions\n-   Data frame functions\n-   Plotting functions\n\n## Mutate (or vector) functions\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(is.na(x))\nmean(is.na(y))\nmean(is.na(z))\n\nx / sum(x, na.rm = TRUE)\ny / sum(y, na.rm = TRUE)\nz / sum(z, na.rm = TRUE)\n\nround(x / sum(x, na.rm = TRUE) * 100, 1)\nround(y / sum(y, na.rm = TRUE) * 100, 1)\nround(z / sum(z, na.rm = TRUE) * 100, 1)\n```\n:::\n\n\n\n\nGiven a vector of birthdates, write a function to compute the age in years.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: callout-tip\nThe `{lubridate}` package makes working with dates in R much easier. Take a look at the package [Getting started guide](https://lubridate.tidyverse.org/articles/lubridate.html) or [Ch. 17 Dates and Times](https://r4ds.hadley.nz/datetimes) from R4DS for more information.\n:::\n\n## Data frame functions\n\nUsing the datasets from `{nycflights13}`, write a function that:\n\n1.  Finds all flights that were cancelled (i.e. `is.na(arr_time)`) or delayed by more than an hour.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter_severe()\n```\n:::\n\n\n\n\n2.  Counts the number of cancelled flights and the number of flights delayed by more than an hour.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> group_by(dest) |> summarize_severe()\n```\n:::\n\n\n\n\n3.  Finds all flights that were cancelled or delayed by more than a user supplied number of hours:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter_severe(hours = 2)\n```\n:::\n\n\n\n\n4.  Summarizes the weather to compute the minimum, mean, and maximum, of a user supplied variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather |> summarize_weather(temp)\n```\n:::\n\n\n\n\n5.  Converts the user supplied variable that uses clock time (e.g., `dep_time`, `arr_time`, etc.) into a decimal time (i.e. hours + (minutes / 60)).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> standardize_time(sched_dep_time)\n```\n:::\n\n\n\n\n::: callout-tip\nQuestion 4 and 5 may require an understanding of [tidy evaluation](https://r4ds.hadley.nz/functions#indirection-and-tidy-evaluation) using the \"embracing\" syntax. Go back and review our reading if you are not sure how this works!\n:::\n\n## Plotting functions\n\nBuild up a rich plotting function by incrementally implementing each of the steps below:\n\n1. Draw a map using an `sf` object.\n\n2. Map an variable from the data to a single aesthetic attribute, such as `fill`, `color`, or `size`.\n\n3. Add annotation to the map using `geom_sf_text()` or `geom_sf_label()`. You could add labels to the highest or lowest values or add labels based on a second variable.\n\n4. **Optional:** Apply a spatial or geometric transformation function, e.g. `sf::st_centroid()`, `sf::st_filter()`, or `sf::st_buffer()`, to part or all of the input data before plotting. Consider how spatial transformation can be part of the process of visualizing spatial data.\n\n5. Add a title and labels. Your function should allow a use to customize the labels as needed.\n\nPlease give your function an appropriate name and provide one or more examples showing how your function works with different input data sources.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_function <- function(\n  # Function arguments\n  ...\n  ) {\n  # Body of the function\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}