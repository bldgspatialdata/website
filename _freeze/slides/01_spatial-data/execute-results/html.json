{
  "hash": "e98e1f6dfc426ae9d82c659d48a0a42a",
  "result": {
    "markdown": "---\ntitle: \"01: Getting started with spatial data using sf and the tidyverse\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Overview\n\n-   What is R?\n-   How does R work with spatial data?\n-   Take a look at `{sf}` and tidyverse in action\n\n## What is R?\n\n::: columns\n::: {.column width=\"70%\"}\nR is best known for as a *statistical* programming language often used in data science and research.\n\nLike Python or C++, R is an **object-oriented, functional programming language** where the base set of features can be extended through open-source packages or libraries.\n:::\n\n::: {.column width=\"30%\"}\n![](images/R_logo.png)\n:::\n:::\n\n::: notes\n> A package is a bundle of code that a generous person has written, tested, and then given away. Most of the time packages are designed to solve a specific problem, so they to pull together functions related to a particular data science problem (e.g., data wrangling, visualisation, inference).\n\nFrom [BasicBasics 2](https://rladiessydney.org/courses/ryouwithme/01-basicbasics-2/) (R-Ladies Sydney)\n:::\n\n### R has been around a while üìú\n\n::: columns\n::: {.column width=\"40%\"}\nR turns 30 years old this month üéÇ\n\nR is based an S---a language created at Bell Labs in 1976 to support exploratory data analysis.\n:::\n\n::: {.column width=\"60%\"}\n![Digital Equipment Corporation VAX 11/780 mainframe computer. Source: Boston Public Library [Copyright Spencer Grant](https://www.digitalcommonwealth.org/search/commonwealth:sn00b088z)](images/14085834343_552d1d3197_h.jpg)\n:::\n:::\n\n::: footer\nS ran on VAX 11/780 computers like the mainframe above.\n:::\n\n::: notes\nR turns 30 years old this month and is based on a language called S first created at Bell Labs in 1976. S ran on machines like this one.\n\nR has included support for a variety of spatial data analysis tasks since 2000.\n\nThe sf package (short for simple features) was first published to CRAN in 2016.\n:::\n\n### R doesn't use a graphical interface ü§ñ\n\n![](images/rstudio-ide-screenshot.png)\n\n::: footer\n[RStudio](https://posit.co/products/open-source/rstudio/) is the most popular IDE for R but some people use [VS Code](https://code.visualstudio.com/docs/languages/r), [radian](https://github.com/randy3k/radian), or a simple text editor.\n:::\n\n::: notes\nUnlike a desktop GIS application, you use it by writing code in a text file---not clicking around a graphical interface. I use an Integrated Development Environment or IDE known as RStudio to write R scripts, develop R packages, and even create presentations like this one.\n\n> With the advent of 'modern' GIS software, most people want to point and click their way through life. That's good, but there is a tremendous amount of flexibility and power waiting for you with the command line.\n\nGary E. Sherman, founder of the Quantum GIS project, explains in Desktop GIS: Mapping the Planet with Open Source Tools\n:::\n\n### R is growing in popularity üìà\n\n\n::: {.cell}\n\n:::\n\n\n### R is growing in popularity üìà\n\nThe average number of monthly downloads for `{sf}` (the most popular package for working with spatial data in R) has grown from just 1,300 in June 2018 to **over 58,000 in June 2023**.\n\n::: notes\nOver the past five years, average number of monthly downloads for sf, the most popular package for working with spatial data in R has grown from just 1,300 in June 2018 to over 58,000 in June 2023.\n\nIt helps that R and RStudio are both free, most packages are open-source, and there are ample free online books and trainings.\n:::\n\n### R is flexible üõ†Ô∏è\n\n::: columns\n::: {.column width=\"60%\"}\nThere can't be packages for everything---but sometimes it feels that way.\n\nPackages let you work with everything from Microsoft Word documents to 3D renderings of digital elevation data to Google Drive to Google Earth Engine.\n:::\n\n::: {.column width=\"40%\"}\n![Created with `{rayshader}`](https://www.rayshader.com/reference/figures/smallhobart.gif){fig-alt=\"Animated loop showing a mountain with lighting from different directions.\"}\n:::\n:::\n\n::: footer\nIf a package doesn't exist already, there are also packages like `{usethis}` or `{devtools}` that help *you* build it.\n:::\n\n## How does R work with spatial data?\n\n::: columns\n::: {.column width=\"65%\"}\nThe `{sf}` package, first published in 2016, is the most popular R package for spatial data.\n\n::: {style=\"font-size: 80%;\"}\nExtension packages include:\n\n-   [lwgeom](https://github.com/r-spatial/lwgeom/) for selected liblwgeom/PostGIS functions\n-   [stars](https://github.com/r-spatial/stars/) for raster data, and raster or vector data cubes (spatial time series)\n-   [sfnetworks](https://luukvdmeer.github.io/sfnetworks/) for geospatial network data\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](https://user-images.githubusercontent.com/520851/34887433-ce1d130e-f7c6-11e7-83fc-d60ad4fae6bd.gif){fig-alt=\"sf package logo\" fig-align=\"center\"}\n\n![](https://luukvdmeer.github.io/sfnetworks/reference/figures/logo.png){fig-alt=\"sfnetworks package logo\" fig-align=\"center\" width=\"200\"}\n:::\n:::\n\n### `{sf}` is built on open source libraries\n\n::: columns\n::: {.column width=\"65%\"}\nLike QGIS, `{sf}` rests on a foundation of open source libraries:\n\n::: {style=\"font-size: 80%;\"}\n-   [SQLite](https://www.sqlite.org/index.html) (a C library that implements a SQL database engine),\n-   [GDAL](https://gdal.org/index.html) (the Geospatial Data Abstraction Library),\n-   [PROJ](https://proj.org/en/9.2/index.html) (a coordinate transformation software library),\n-   and [GEOS](https://libgeos.org/) (a C/C++ library for computational geometry).\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](images/GDALLogoColor.svg){fig-alt=\"GDAL logo\"}\n:::\n:::\n\n### How are `sf` objects organized\n\n::: columns\n::: {.column width=\"40%\"}\n`sf` objects are an implementation of the simple feature standard.\n\nSimple feature objects are a data frame attached to a \"sticky\" geometry column (known as a `sfc` list-column).\n:::\n\n::: {.column width=\"60%\"}\n![Illustration (c) 2018 by [Allison Horst](https://twitter.com/allison_horst/status/1071456081308614656)](images/allison-horst_sf-illustration.jpeg)\n:::\n:::\n\n::: footer\nThe geometry for a `sf` data frame is known as a simple feature collection (`sfc`) object. A `sfc` object is made up of `sfg` objects.\n:::\n\n------------------------------------------------------------------------\n\n-   `sf`, the table (data.frame) with feature attributes and \"sticky\" feature geometries, which **contains**\n-   `sfc`, the list-column with the geometries for each feature (record), which is **composed of**\n\nFrom [Simple Feature for R](https://r-spatial.github.io/sf/articles/sf1.html#how-simple-features-in-r-are-organized)\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n:::\n\n```{.r .cell-code}\nnc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n    AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID BIR74 SID74\n1  0.114     1.442  1825    1825        Ashe 37009  37009        5  1091     1\n2  0.061     1.231  1827    1827   Alleghany 37005  37005        3   487     0\n3  0.143     1.630  1828    1828       Surry 37171  37171       86  3188     5\n4  0.070     2.968  1831    1831   Currituck 37053  37053       27   508     1\n5  0.153     2.206  1832    1832 Northampton 37131  37131       66  1421     9\n6  0.097     1.670  1833    1833    Hertford 37091  37091       46  1452     7\n7  0.062     1.547  1834    1834      Camden 37029  37029       15   286     0\n8  0.091     1.284  1835    1835       Gates 37073  37073       37   420     0\n9  0.118     1.421  1836    1836      Warren 37185  37185       93   968     4\n10 0.124     1.428  1837    1837      Stokes 37169  37169       85  1612     1\n   NWBIR74 BIR79 SID79 NWBIR79                       geometry\n1       10  1364     0      19 MULTIPOLYGON (((-81.47276 3...\n2       10   542     3      12 MULTIPOLYGON (((-81.23989 3...\n3      208  3616     6     260 MULTIPOLYGON (((-80.45634 3...\n4      123   830     2     145 MULTIPOLYGON (((-76.00897 3...\n5     1066  1606     3    1197 MULTIPOLYGON (((-77.21767 3...\n6      954  1838     5    1237 MULTIPOLYGON (((-76.74506 3...\n7      115   350     2     139 MULTIPOLYGON (((-76.00897 3...\n8      254   594     2     371 MULTIPOLYGON (((-76.56251 3...\n9      748  1190     2     844 MULTIPOLYGON (((-78.30876 3...\n10     160  2038     5     176 MULTIPOLYGON (((-80.02567 3...\n```\n:::\n:::\n\n\n::: footer\n`<-` and `=` both work as **assignment operators** that *assign* an object or the output from a function into a new object.\n:::\n\n------------------------------------------------------------------------\n\nYou can take a look at the geometry (the `sfc` list-column) using `st_geometry()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 100 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 5 geometries:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 3...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((-81.23989 36.36536, -81.24069 3...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((-80.45634 36.24256, -80.47639 3...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((-76.00897 36.3196, -76.01735 36...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((-77.21767 36.24098, -77.23461 3...\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n`sfc` objects have attributes for the coordinate reference system (`crs`), bounding box (`bbox`), precision, and number of empty geometries (`n_empty`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(st_geometry(nc))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$n_empty\n[1] 0\n\n$crs\nCoordinate Reference System:\n  User input: NAD27 \n  wkt:\nGEOGCRS[\"NAD27\",\n    DATUM[\"North American Datum 1927\",\n        ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4267]]\n\n$class\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n\n$precision\n[1] 0\n\n$bbox\n     xmin      ymin      xmax      ymax \n-84.32385  33.88199 -75.45698  36.58965 \n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n`sfc` objects are composed of `sfg` objects. Each object hold the feature geometry of an individual simple feature.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(nc)[[1]]\n```\n:::\n\n\n------------------------------------------------------------------------\n\nThe `{sf}` package also includes functions that allow you to build feature geometry from scratch using `st_point()`, `st_linestring()`, and other functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_point(c(0, 1))\n\nst_linestring(matrix(c(0, 0, 1, 1), , 2))\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Take a look at `{sf}` and the tidyverse in action\n\nPackages are simple to install:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"sf\", \"ggplot2\", \"dplyr\"))\n```\n:::\n\n\nAnd to load:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### tidyverse packages are used for everyday data analyses\n\n![Courtesy [R for Data Science](https://r4ds.hadley.nz/whole-game.html#fig-ds-whole-game)](images/whole-game.png)\n\n------------------------------------------------------------------------\n\n### Import spatial data from a file\n\nUsing the `{sf}` package, you can use `st_read()` to read data into R from a local file, URL, or database:\n\n\n::: {.cell name='st_read'}\n\n```{.r .cell-code}\nmd <- st_read(\"files/md_counties.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `md_counties' from data source \n  `/Users/elipousson/Projects/03_teaching/website/slides/files/md_counties.gpkg' \n  using driver `GPKG'\nSimple feature collection with 24 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8848525 ymin: 4563419 xmax: -8347435 ymax: 4825776\nProjected CRS: WGS 84 / Pseudo-Mercator\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nOr, if you drop the geometry, a `sf` object is just like a spreadsheet:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_drop_geometry(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   STATEFP COUNTYFP COUNTYNS GEOID            NAME               NAMELSAD LSAD\n1       24      047 01668802 24047       Worcester       Worcester County   06\n2       24      001 01713506 24001        Allegany        Allegany County   06\n3       24      510 01702381 24510       Baltimore         Baltimore city   25\n4       24      015 00596115 24015           Cecil           Cecil County   06\n5       24      005 01695314 24005       Baltimore       Baltimore County   06\n6       24      013 01696228 24013         Carroll         Carroll County   06\n7       24      009 01676636 24009         Calvert         Calvert County   06\n8       24      019 00596495 24019      Dorchester      Dorchester County   06\n9       24      003 01710958 24003    Anne Arundel    Anne Arundel County   06\n10      24      021 01711211 24021       Frederick       Frederick County   06\n11      24      033 01714670 24033 Prince George's Prince George's County   06\n12      24      027 01709077 24027          Howard          Howard County   06\n13      24      023 01711058 24023         Garrett         Garrett County   06\n14      24      031 01712500 24031      Montgomery      Montgomery County   06\n15      24      035 00596089 24035    Queen Anne's    Queen Anne's County   06\n16      24      041 00592947 24041          Talbot          Talbot County   06\n17      24      045 01668606 24045        Wicomico        Wicomico County   06\n18      24      039 00596907 24039        Somerset        Somerset County   06\n19      24      025 01698178 24025         Harford         Harford County   06\n20      24      037 01697853 24037      St. Mary's      St. Mary's County   06\n21      24      029 00593907 24029            Kent            Kent County   06\n22      24      017 01676992 24017         Charles         Charles County   06\n23      24      043 01714220 24043      Washington      Washington County   06\n24      24      011 00595737 24011        Caroline        Caroline County   06\n   CLASSFP MTFCC CSAFP CBSAFP METDIVFP FUNCSTAT      ALAND     AWATER\n1       H1 G4020   480  41540     <NA>        A 1213156434  586531107\n2       H1 G4020  <NA>  19060     <NA>        A 1093489884   14710932\n3       C7 G4020   548  12580     <NA>        F  209649327   28758743\n4       H1 G4020   428  37980    48864        A  896912533  185281256\n5       H1 G4020   548  12580     <NA>        A 1549740652  215957832\n6       H1 G4020   548  12580     <NA>        A 1159355859   13112464\n7       H1 G4020   548  47900    47894        A  552158542  341580668\n8       H1 G4020   480  15700     <NA>        A 1400573746 1145353068\n9       H1 G4020   548  12580     <NA>        A 1074353889  448032843\n10      H1 G4020   548  47900    23224        A 1710922224   17674121\n11      H1 G4020   548  47900    47894        A 1250057213   41922695\n12      H1 G4020   548  12580     <NA>        A  649956423    6336170\n13      H1 G4020  <NA>   <NA>     <NA>        A 1681102437   22498420\n14      H1 G4020   548  47900    23224        A 1277193339   35686502\n15      H1 G4020   548  12580     <NA>        A  962673214  360020725\n16      H1 G4020   548  20660     <NA>        A  695561637  539363457\n17      H1 G4020   480  41540     <NA>        A  969767208   66764613\n18      H1 G4020   480  41540     <NA>        A  828145301  752652883\n19      H1 G4020   548  12580     <NA>        A 1132152044  231885675\n20      H1 G4020   548  15680     <NA>        A  928809940 1050592561\n21      H1 G4020  <NA>   <NA>     <NA>        A  717497117  353321619\n22      H1 G4020   548  47900    47894        A 1185757843  479438830\n23      H1 G4020   548  25180     <NA>        A 1185655248   24820607\n24      H1 G4020  <NA>   <NA>     <NA>        A  827350254   16777066\n      INTPTLAT     INTPTLON\n1  +38.2221332 -075.3099315\n2  +39.6123134 -078.7031037\n3  +39.3000324 -076.6104761\n4  +39.5623537 -075.9415852\n5  +39.4431666 -076.6165693\n6  +39.5633280 -077.0153297\n7  +38.5227191 -076.5297621\n8  +38.4291957 -076.0474333\n9  +38.9916174 -076.5608941\n10 +39.4701773 -077.3976358\n11 +38.8292778 -076.8481880\n12 +39.2522639 -076.9244057\n13 +39.5472985 -079.2746192\n14 +39.1373815 -077.2030633\n15 +39.0406929 -076.0824053\n16 +38.7483486 -076.1784757\n17 +38.3673699 -075.6320828\n18 +38.0744501 -075.8533228\n19 +39.5374292 -076.2997894\n20 +38.2230765 -076.5344870\n21 +39.2412793 -076.1259867\n22 +38.4728532 -077.0154272\n23 +39.6036207 -077.8146709\n24 +38.8715306 -075.8316620\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nYou can plot data with R's built-in `plot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(md[, 2])\n```\n\n::: {.cell-output-display}\n![](01_spatial-data_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n::: footer\nSquare brackets (`[]`) are an easy way to subset rows and columns.\n:::\n\n------------------------------------------------------------------------\n\nYou can summarize data using the `summary()` function:\n\n\n::: {.cell name='summary'}\n\n```{.r .cell-code}\nsummary(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   STATEFP            COUNTYFP           COUNTYNS            GEOID          \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     NAME             NAMELSAD             LSAD             CLASSFP         \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    MTFCC              CSAFP              CBSAFP            METDIVFP        \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   FUNCSTAT             ALAND               AWATER            INTPTLAT        \n Length:24          Min.   :2.096e+08   Min.   :6.336e+06   Length:24         \n Class :character   1st Qu.:8.279e+08   1st Qu.:2.424e+07   Class :character  \n Mode  :character   Median :1.084e+09   Median :2.006e+08   Mode  :character  \n                    Mean   :1.048e+09   Mean   :2.908e+08                     \n                    3rd Qu.:1.222e+09   3rd Qu.:4.559e+08                     \n                    Max.   :1.711e+09   Max.   :1.145e+09                     \n   INTPTLON                    geom   \n Length:24          MULTIPOLYGON :24  \n Class :character   epsg:3857    : 0  \n Mode  :character   +proj=merc...: 0  \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\n::: footer\nThe `sf` package adds S3 methods for the base `plot()` and `summary()` functions. Learn more about [S3 methods in *Advanced R*](https://adv-r.hadley.nz/s3.html).\n:::\n\n### Using `{sf}` with tidyverse packages\n\n::: columns\n::: {.column width=\"65%\"}\nThe [tidyverse](https://www.tidyverse.org/) family of R packages developed by [Posit](https://posit.co) (formerly known as RStudio) including:\n\n::: {style=\"font-size: 80%;\"}\n-   [ggplot2](https://ggplot2.tidyverse.org/) for making graphics and data visualizations from bar charts to box plots to maps\n-   [dplyr](https://dplyr.tidyverse.org/) for common data manipulation challenges, such as filtering, re-arranging, or summarizing data\n-   [readr](https://readr.tidyverse.org/) for reading rectangular data in a fast and friendly way\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](images/tidyverse-packages.png){fig-alt=\"Tidyverse packages\"}\n:::\n:::\n\n::: notes\nNotably, the development of these packages is supported by Posit---but they are fully open-source and include contributions from quite literally *hundreds* of individual developers (291 for ggplot2 and 260 for dplyr).\n\nsf works well with tidyverse packages and I use them extensively in my own work.\n:::\n\n------------------------------------------------------------------------\n\n### Transform and visualize\n\ntidyverse packages work well with `{sf}` for transforming and visualizing spatial data.\n\n------------------------------------------------------------------------\n\nFor example, we can use `geom_sf()` from `{ggplot2}` to make a simple map:\n\n\n::: {.cell name='geom_sf' output-location='slide'}\n\n```{.r .cell-code}\nmd_map <- ggplot(data = md) +\n  geom_sf() +\n  theme_minimal()\n\nmd_map\n```\n\n::: {.cell-output-display}\n![](01_spatial-data_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nTake a peek at the values of the data with the `glimpse()` function from `{dplyr}`:\n\n\n::: {.cell name='glimpse'}\n\n```{.r .cell-code}\nglimpse(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 24\nColumns: 18\n$ STATEFP  <chr> \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"‚Ä¶\n$ COUNTYFP <chr> \"047\", \"001\", \"510\", \"015\", \"005\", \"013\", \"009\", \"019\", \"003\"‚Ä¶\n$ COUNTYNS <chr> \"01668802\", \"01713506\", \"01702381\", \"00596115\", \"01695314\", \"‚Ä¶\n$ GEOID    <chr> \"24047\", \"24001\", \"24510\", \"24015\", \"24005\", \"24013\", \"24009\"‚Ä¶\n$ NAME     <chr> \"Worcester\", \"Allegany\", \"Baltimore\", \"Cecil\", \"Baltimore\", \"‚Ä¶\n$ NAMELSAD <chr> \"Worcester County\", \"Allegany County\", \"Baltimore city\", \"Cec‚Ä¶\n$ LSAD     <chr> \"06\", \"06\", \"25\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"‚Ä¶\n$ CLASSFP  <chr> \"H1\", \"H1\", \"C7\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"‚Ä¶\n$ MTFCC    <chr> \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\"‚Ä¶\n$ CSAFP    <chr> \"480\", NA, \"548\", \"428\", \"548\", \"548\", \"548\", \"480\", \"548\", \"‚Ä¶\n$ CBSAFP   <chr> \"41540\", \"19060\", \"12580\", \"37980\", \"12580\", \"12580\", \"47900\"‚Ä¶\n$ METDIVFP <chr> NA, NA, NA, \"48864\", NA, NA, \"47894\", NA, NA, \"23224\", \"47894‚Ä¶\n$ FUNCSTAT <chr> \"A\", \"A\", \"F\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"‚Ä¶\n$ ALAND    <dbl> 1213156434, 1093489884, 209649327, 896912533, 1549740652, 115‚Ä¶\n$ AWATER   <dbl> 586531107, 14710932, 28758743, 185281256, 215957832, 13112464‚Ä¶\n$ INTPTLAT <chr> \"+38.2221332\", \"+39.6123134\", \"+39.3000324\", \"+39.5623537\", \"‚Ä¶\n$ INTPTLON <chr> \"-075.3099315\", \"-078.7031037\", \"-076.6104761\", \"-075.9415852‚Ä¶\n$ geom     <MULTIPOLYGON [m]> MULTIPOLYGON (((-8380505 45..., MULTIPOLYGON (((‚Ä¶\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n#### Using `{sf}` for spatial transformations\n\n::: columns\n::: {.column width=\"60%\"}\n`{sf}` includes a range of spatial transformation functions with names matching the spatial functions of [PostGIS](https://postgis.net/).\n\nTo show how this works, we can get the center of Baltimore City, buffer by 25 miles, and filter intersecting counties.\n:::\n\n::: {.column width=\"40%\"}\n![ST_intersects relationships with different geometry types](images/st_intersects_postgis-intro.png)\n:::\n:::\n\n::: notes\nthat you might usually do [geoprocessing tools from ArcGIS Pro](https://pro.arcgis.com/en/pro-app/latest/tool-reference/main/arcgis-pro-tool-reference.htm) or the [QGIS Processing Toolbox](https://docs.qgis.org/3.28/en/docs/user_manual/processing/toolbox.html) at included with the `{sf}`, `{lwgeom}`, or another R package.\n\n-   Get a center point for Baltimore City with `st_centroid()`\n-   Apply a 25 mile buffer using `st_buffer()` and `as_units()` from the `{units}` package\n-   Filter our original data on Maryland counties with `st_filter()`\n-   Now we can combine our earlier map with the transformed data\n:::\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n\nbalt_center\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -8528259 ymin: 4764882 xmax: -8528259 ymax: 4764882\nProjected CRS: WGS 84 / Pseudo-Mercator\n  STATEFP COUNTYFP COUNTYNS GEOID      NAME       NAMELSAD LSAD CLASSFP MTFCC\n3      24      510 01702381 24510 Baltimore Baltimore city   25      C7 G4020\n  CSAFP CBSAFP METDIVFP FUNCSTAT     ALAND   AWATER    INTPTLAT     INTPTLON\n3   548  12580     <NA>        F 209649327 28758743 +39.3000324 -076.6104761\n                      geom\n3 POINT (-8528259 4764882)\n```\n:::\n:::\n\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n\nbalt_area <- st_buffer(balt_center, dist = as_units(25, \"mi\"))\n\nbalt_area\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 17 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -8568493 ymin: 4724649 xmax: -8488026 ymax: 4805116\nProjected CRS: WGS 84 / Pseudo-Mercator\n  STATEFP COUNTYFP COUNTYNS GEOID      NAME       NAMELSAD LSAD CLASSFP MTFCC\n3      24      510 01702381 24510 Baltimore Baltimore city   25      C7 G4020\n  CSAFP CBSAFP METDIVFP FUNCSTAT     ALAND   AWATER    INTPTLAT     INTPTLON\n3   548  12580     <NA>        F 209649327 28758743 +39.3000324 -076.6104761\n                            geom\n3 POLYGON ((-8488026 4764882,...\n```\n:::\n:::\n\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n\nbalt_area <- st_buffer(balt_center, dist = as_units(25, \"mi\"))\n\nbalt_area_counties <- st_filter(md, balt_area, .predicate = st_intersects)\n\nbalt_area_counties\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 9 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8630342 ymin: 4655334 xmax: -8433120 ymax: 4825554\nProjected CRS: WGS 84 / Pseudo-Mercator\n  STATEFP COUNTYFP COUNTYNS GEOID            NAME               NAMELSAD LSAD\n1      24      510 01702381 24510       Baltimore         Baltimore city   25\n2      24      005 01695314 24005       Baltimore       Baltimore County   06\n3      24      013 01696228 24013         Carroll         Carroll County   06\n4      24      003 01710958 24003    Anne Arundel    Anne Arundel County   06\n5      24      033 01714670 24033 Prince George's Prince George's County   06\n6      24      027 01709077 24027          Howard          Howard County   06\n7      24      031 01712500 24031      Montgomery      Montgomery County   06\n8      24      025 01698178 24025         Harford         Harford County   06\n9      24      029 00593907 24029            Kent            Kent County   06\n  CLASSFP MTFCC CSAFP CBSAFP METDIVFP FUNCSTAT      ALAND    AWATER    INTPTLAT\n1      C7 G4020   548  12580     <NA>        F  209649327  28758743 +39.3000324\n2      H1 G4020   548  12580     <NA>        A 1549740652 215957832 +39.4431666\n3      H1 G4020   548  12580     <NA>        A 1159355859  13112464 +39.5633280\n4      H1 G4020   548  12580     <NA>        A 1074353889 448032843 +38.9916174\n5      H1 G4020   548  47900    47894        A 1250057213  41922695 +38.8292778\n6      H1 G4020   548  12580     <NA>        A  649956423   6336170 +39.2522639\n7      H1 G4020   548  47900    23224        A 1277193339  35686502 +39.1373815\n8      H1 G4020   548  12580     <NA>        A 1132152044 231885675 +39.5374292\n9      H1 G4020  <NA>   <NA>     <NA>        A  717497117 353321619 +39.2412793\n      INTPTLON                           geom\n1 -076.6104761 MULTIPOLYGON (((-8539486 47...\n2 -076.6165693 MULTIPOLYGON (((-8537944 48...\n3 -077.0153297 MULTIPOLYGON (((-8566905 48...\n4 -076.5608941 MULTIPOLYGON (((-8524879 47...\n5 -076.8481880 MULTIPOLYGON (((-8564237 47...\n6 -076.9244057 MULTIPOLYGON (((-8545393 47...\n7 -077.2030633 MULTIPOLYGON (((-8577825 47...\n8 -076.2997894 MULTIPOLYGON (((-8483226 47...\n9 -076.1259867 MULTIPOLYGON (((-8479204 47...\n```\n:::\n:::\n\n\n#### Using `{sf}` for spatial transformations\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = md) +\n  geom_sf() +\n  geom_sf(data = balt_area_counties, fill = \"darkorange\", alpha = 0.4) +\n  geom_sf(data = balt_area, color = \"orange\", fill = NA, linewidth = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](01_spatial-data_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n::: notes\nVisual checks remain an important part of a workflow even when using a non-graphical interface. Map the data to see the results.\n:::\n\n------------------------------------------------------------------------\n",
    "supporting": [
      "01_spatial-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}