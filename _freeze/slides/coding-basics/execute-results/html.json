{
  "hash": "1780f48649d62e5cc8328dd66a7a9015",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding basics\"\n---\n\n\n## Week 1\n\n### Packages in R\n\nA container for:\n\n-   functions\n-   data\n-   documentation\n\n`{tidyverse}` is a *metapackage*â€”or a package that loads a set of other packages.\n\n#### Installing packages\n\nUse `install.packages()` to install a package from [CRAN](https://cran.r-project.org/) (Comprehensive R Archive Network):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"sf\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\t/var/folders/3f/50m42dx1333_dfqb5772j6_40000gn/T//Rtmpl8GbH5/downloaded_packages\n```\n\n\n:::\n:::\n\n\nBut, remember, this does not work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(sf)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'sf' not found\n```\n\n\n:::\n:::\n\n\n#### Loading packages\n\nUse `library()` to load a package into your environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### Why can we use both `library(sf)` and `library(\"sf\")`?\n\nThe `package` argument can be the name of a package: as a **name**, **literal character string**, or **a character string**.\n:::\n\n#### base functions and packages are always available\n\nThe `{base}` package for R is one of fifteen \"base packages\" that are always available. Functions like `sum()`, `max()`, and `paste0()` are all examples of \"base functions\".\n\n### Functions in R\n\nFunctions take inputs (known as arguments or parameters) and return outputs.\n\nA container for:\n\n-   Logic (a.k.a. an algorithm)\n-   Math\n-   More functions\n-   Data *or* connections to data sources\n\n------------------------------------------------------------------------\n\n### Take a look at `st_read()`\n\n\n::: {.cell}\n\n:::\n\n\n\n------------------------------------------------------------------------\n\nSome functions require a specific type of input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(\"A\", \"B\", \"C\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in sum(\"A\", \"B\", \"C\"): invalid 'type' (character) of argument\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nBut some functions are more flexible:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste0(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"123\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"A\", \"B\", \"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABC\"\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nOrder of execution matters!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar + 2\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in var + 2: non-numeric argument to binary operator\n```\n\n\n:::\n\n```{.r .cell-code}\nvar <- 1\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}