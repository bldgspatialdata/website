{
  "hash": "bb9c7af3e6c6418a6a7eca1846ff7a15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Effective visualization with `{ggplot2}` and R\"\n---\n\n\n## Where to start?\n\n- Know your goal\n- Know your audience\n- Know your format\n\n## What next?\n\n- Choosing appropriate graphic types\n- Writing and formatting clear text\n- Selecting appropriate and engaging colors\n- Preparing your feature geometry appropriately\n\n## Choosing appropriate graphic types\n\n- What makes one graphic, chart, plot, or map \"better\" or \"worse\"?\n\n## Items, Attributes, Marks, and Channels\n\nIn [Visualization Analysis and Design](https://www.cs.ubc.ca/~tmm/vadbook/) (2014), Tamara Munzner describes a set of useful concepts:\n\n- items,\n- attributes,\n- links,\n- marks,\n- and channels\n\n::: notes\nBook website: https://www.cs.ubc.ca/~tmm/vadbook/\n\nvia https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/percep.html\n:::\n\n## Items, Attributes, Marks, and Channels\n\nItems\n: basic units on which data is collected\n\nAttributes\n: numerical or categorical features of the data items we want to represent\n\nLinks\n: relations among items, e.g. months within a year, or countries within a continent.\n\nMarks\n: geometric entities used to represent items: points, lines, areas.\n\nVisual channels\n: features of marks that can be used to reflect values of attributes.\"\n\n::: notes\nhttps://homepage.divms.uiowa.edu/~luke/classes/STAT4580/percep.html\n:::\n\n\n![Schematic representation of basic perceptual tasks for nine chart types, by Heer and Bostock, following Cleveland and McGill. In both studies, participants were asked to make comparisons of highlighted portions of each chart type, and say which was smaller.](https://socviz.co/assets/ch-01-cleveland-task-types.png)\n\n::: notes\nhttps://socviz.co/lookatdata.html\n\nCleveland went on to apply the results of this work, developing the trellis display system for data visualization in S, the statistical programming language developed at Bell Labs. (R is a later implementation of S.)\n:::\n\n------------------------------------------------------------------------\n\n\n::: columns\n::: {.column width=\"60%\"}\n\n## What channels can you use for continuous data?\n\n- Position on a common scale\n- Position on unaligned scales\n- Length\n- Tilt or angle\n- Area (2D as size)\n- Depth (3D as position)\n- Color luminance or brightness\n- Color saturation or intensity\n- Curvature\n- Volume (3D as size)\n\n:::\n\n::: {.column width=\"40%\"}\n![](https://socviz.co/assets/ch-01-channels-for-cont-data-vertical.png)\n:::\n:::\n\n------------------------------------------------------------------------\n\n::: columns\n::: {.column width=\"40%\"}\n\n## What channels can you use for categorical data?\n\n- Position in space\n- Color hue\n- Motion\n- Shape\n\n:::\n\n::: {.column width=\"60%\"}\n![](https://socviz.co/assets/ch-01-channels-for-cat-data-vertical.png)\n:::\n:::\n\n## Loading required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)     ## data wrangling + ggplot2\nlibrary(colorspace)    ## adjust colors\nlibrary(cols4all)      ## Color-blind friendly palettes\nlibrary(ggforce)       ## sina plots\nlibrary(ggdist)        ## halfeye plots\nlibrary(ggridges)      ## ridgeline plots\nlibrary(systemfonts)   ## custom fonts\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arcgislayers)\nlibrary(ggplot2)\nlibrary(tigris)\nlibrary(sf)\noptions(tigris_use_cache = TRUE)\n```\n:::\n\n\n## Setting up a theme\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntheme_set(theme_void(base_family = \"Roboto\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntheme_update(\n  axis.text.x = element_text(color = \"black\", face = \"bold\", size = 26, \n                             margin = margin(t = 6)),\n  axis.text.y = element_text(color = \"black\", size = 22, hjust = 1, \n                             margin = margin(r = 6), family = \"Roboto Mono\"),\n  axis.line.x = element_line(color = \"black\", size = 1),\n  panel.grid.major.y = element_line(color = \"grey90\", size = .6),\n  plot.background = element_rect(fill = \"white\", color = \"white\"),\n  plot.margin = margin(rep(20, 4))\n)\n\n\n## theme for horizontal charts\ntheme_flip <-\n  theme(\n    axis.text.x = element_text(face = \"plain\", family = \"Roboto Mono\", size = 22),\n    axis.text.y = element_text(face = \"bold\", family = \"Roboto\", size = 26),\n    panel.grid.major.x = element_line(color = \"grey90\", size = .6),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"top\", \n    legend.text = element_text(family = \"Roboto Mono\", size = 18),\n    legend.title = element_text(face = \"bold\", size = 18, margin = margin(b = 25))\n  )\n```\n:::\n\n\n## Finding a palette\n\n![](https://user-images.githubusercontent.com/2444081/210850914-cdb8a128-1b8a-4900-94d0-dfa6ca449585.png)\n\n## Finding a palette\n\n-   [cols4all](https://github.com/mtennekes/cols4all)\n-   [paletteer](https://emilhvitfeldt.github.io/paletteer/)\n\n## Adjusting colors\n\n-   [colorspace](https://colorspace.r-forge.r-project.org/index.html)\n-   [shades](https://github.com/jonclayden/shades)\n\n## Plots\n\n- Scatterplot\n- Barplot\n- Line plot\n\n\n## Maps\n\n1.  General purpose\n2.  Thematic\n3.  Cartographic\n\n::: notes\nhttps://www.mappingasprocess.net/blog/2018/1/15/why-i-dont-like-thematic-maps\n:::\n\n## Thematic maps\n\nVary by data type:\n\n-   qualitative,\n-   quantitative\n\n## Thematic maps\n\nVary by feature type:\n\n* Points, location data.\n\n* Lines, routes, connections.\n\n* Area data, aggregates, rates.\n\n* Sampled surface data.\n\n* ...\n\n\n::: notes\nQualitative thematic maps show the spatial extent of categorical, or nominal, data (e.g., soil type, land cover, political districts). Quantitative thematic maps, conversely, demonstrate the spatial patterns of numerical data (e.g., income, age, population).\n:::\n\n------------------------------------------------------------------------\n\n![](https://raw.githubusercontent.com/Nowosad/rspatial-map-challenge-2020/main/figs/day08-example.png)\n\n------------------------------------------------------------------------\n\n![](https://raw.githubusercontent.com/Nowosad/rspatial-map-challenge-2020/main/figs/day20-example.jpeg)\n\n::: notes\nhttps://github.com/Nowosad/rspatial-map-challenge-2020/blob/main/figs/day20-example.jpeg\n:::\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd_counties <- counties(\"MD\")\nmd_counties <- st_transform(md_counties, 3857)\n\n\nurl <- \"https://www.roads.maryland.gov/mdotsha/pages/Index.aspx?PageId=300\"\n\nurl <- \"https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/Maryland_Bridge_External/FeatureServer/1\"\n\nurl <- \"https://gis1.usgs.gov/arcgis/rest/services/padus3/Proclamation_and_Other_Planning_Boundaries/MapServer/0\"\n\nprotected_areas <- url |> \n  arc_open()\n\nmd_counties <- st_transform(md_counties, 3857)\n\nprotected_areas_data <- protected_areas |> \n  arc_select(filter_geom = st_bbox(md_counties$geometry))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in do.call(rbind.data.frame, fts_raw[[\"attributes\"]]): second argument must be a list\n```\n\n\n:::\n\n```{.r .cell-code}\nprotected_areas_data\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'protected_areas_data' not found\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaltimore_bridges <- md_bridges |> \n  st_filter(md_counties[3, ])\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'md_bridges' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nbaltimore_city_layer <- list(geom_sf(data = md_counties[3, ], fill = NA))\n\nbaltimore_bridges |> \n  ggplot() +\n  geom_point(\n    linewidth = 0.15,\n    aes(\n      color = FUNCTIONAL_CLASS_OF_INVENTORY_,\n      geometry = geometry\n      ),\n    stat = \"sf_coordinates\"\n    ) +\n  baltimore_city_layer\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'baltimore_bridges' not found\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nWhat makes a bad map *bad*?\n\nFor new map makers who might not know any better, it is often:\n\n-   Confusing or distracting layout\n-   Not enough color contrast for features\n-   Cluttered labels, legends, or features\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\nWhat makes a fine map *just* fine?\n\nFor more experienced map makers who might be in a hurry:\n\n-   Not enough thought on font sizes and styling\n-   No feature generalization (simplifying geometry where appropriate for the map scale or subject)\n-   Inappropriate color scales\n\n------------------------------------------------------------------------\n\nThere are many cartographic considerations that also apply to other all types of data visualization:\n\n-   Layout\n-   Fonts (Typography)\n-   Colors\n-   Output formats\n\n------------------------------------------------------------------------\n\nBut there are also some cartographic considerations that apply to maps in special and important ways:\n\n-   Feature geometry (and cartographic conventions)\n-   Projections\n-   Scaling\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}