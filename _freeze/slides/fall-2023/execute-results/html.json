{
  "hash": "6c1790d1514b81ac6f6ae1f737f5c87d",
  "result": {
    "markdown": "---\ntitle: \"Fall 2023 Weekly Updates\"\nnumber-sections: false\nscrollable: true\ncode-link: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\nlibrary(sf)\n```\n:::\n\n\n# This Week\n\n## Week 5: September 27, 2023\n\n### Your questions\n\n------------------------------------------------------------------------\n\nHow do I get my own shapefiles into R?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- \"path to your shapefile\"\n\nyour_data <- read_sf(path)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nIs there a \"best\" way to perform specific operations? Or does it depend\non individual preference?\n\nThere isn't a \"best\" way but there are often *better* and *worse* ways.\nIf you have more than one way to achieve the same objective in R, you\ncan compare the approaches using a few related considerations:\n\n-   Performance (speed and memory)\n-   Code readability\n-   Consistency and predictability\n\n------------------------------------------------------------------------\n\nThis presentation on [Styling R\nCode](https://wurli.github.io/r-styling/coffee-and-coding-styling-r-code.html)\nfrom Jacob Scott is one of the best resources I've seen on the topic.\n\nA few related resources:\n\n-   `{lintr}` flags when it detects problems in your code.\n-   `{styler}` can help automatically reformat your code.\n-   Documentation like [the tidyverse style\n    guide](https://style.tidyverse.org/) can inform how you write code.\n\n------------------------------------------------------------------------\n\nHow can you keep track of what is happening when piping data from one\nfunction to another?\n\nThe `{tidylog}` package is one tool for getting more insight into your\npipelines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidylog, warn.conflicts = FALSE)\n\nmtcars |> \n  filter(cyl == 4) |> \n  mutate(new_var = wt ** 2) |> \n  select(mpg, cyl, new_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl   new_var\nDatsun 710     22.8   4  5.382400\nMerc 240D      24.4   4 10.176100\nMerc 230       22.8   4  9.922500\nFiat 128       32.4   4  4.840000\nHonda Civic    30.4   4  2.608225\nToyota Corolla 33.9   4  3.367225\nToyota Corona  21.5   4  6.076225\nFiat X1-9      27.3   4  3.744225\nPorsche 914-2  26.0   4  4.579600\nLotus Europa   30.4   4  2.289169\nVolvo 142E     21.4   4  7.728400\n```\n\n\n:::\n:::\n\n\nAnother is\n[`{ViewPipeSteps}`](https://github.com/daranzolin/ViewPipeSteps)\n\nThe [debugging tools](https://adv-r.hadley.nz/debugging.html) built into\nR and RStudio can also be useful for trouble-shooting in case of errors\nor unexpected results.\n\n------------------------------------------------------------------------\n\nWhat is the difference between an intensive and extensive variable?\n\nThe concept of *intensive* or *extensive* variables comes to the world\nof spatial data from physics and chemistry. The Wikipedia article on\n[intensive and extensive\nproperties](https://en.wikipedia.org/wiki/Intensive_and_extensive_properties)\nprovides helpful definitions:\n\n-   an intensive property or intensive quantity is one whose magnitude\n    is independent of the size of the system (e.g. temperature,\n    hardness)\n\n-   an extensive property or extensive quantity is one whose magnitude\n    is additive for subsystems (e.g. mass, volume)\n\n### What is due next week\n\nYour weekly check-in response!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses <- readr::read_csv(\"files/2023-09-27_check-in-responses.csv\") |> \n  mutate(\n    week = week - 34\n  )\n\nresponses |>\n  summarise(\n    num_resp = n_distinct(id),\n    .by = week\n  ) |> \n  ggplot(aes(week, num_resp)) +\n  geom_point(size = 2) +\n  geom_line(linewidth = 0.75) +\n  scale_y_continuous(limits = c(0,15)) +\n  labs(\n    x = \"Weeks into class\",\n    y = \"Number of responses\"\n  ) +\n  hrbrthemes::theme_ipsum_pub()\n```\n\n::: {.cell-output-display}\n![](fall-2023_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses |>\n  group_by(id) |> \n  mutate(\n    num_weeks = n_distinct(week)\n  ) |> \n  distinct(id, num_weeks) |> \n  ggplot(aes(num_weeks)) +\n  geom_bar(alpha = 0.75) +\n  labs(\n    x = \"Week\",\n    y = \"Number of students\"\n  ) +\n  hrbrthemes::theme_ipsum_pub()\n```\n\n::: {.cell-output-display}\n![](fall-2023_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n### What is due next week\n\nReadings:\n\n-   [Ch. 6 Data tidying](https://r4ds.hadley.nz/data-tidy.html) in\n    Hadley Wickham, Garrett Grolemund, and Mine Çetinkaya-Rundel *R for\n    Data Science: Import, Tidy, Transform, Visualize, and Model Data*,\n    2nd edition (WIP). (Sebastopol, CA: O\\'Reilly Media, 2023),\n    <https://r4ds.hadley.nz/>.\n\n-   [Ch. 20 Joins](https://r4ds.hadley.nz/joins) in Wickham, Grolemund,\n    and Çetinkaya-Rundel *R for Data Science*.\n\n-   Karl W. Broman and Kara H. Woo \\\"Data Organization in\n    Spreadsheets,\\\" *The American Statistician* 72, no. 1 (January 2,\n    2018): 2--10,\n    doi:[10.1080/00031305.2017.1375989](https://doi.org/10.1080/00031305.2017.1375989).\n\n# Upcoming Updates\n\n## Week 6: October 4, 2023\n\n## Week 7: October 11, 2023\n\n## Week 8: October 18, 2023\n\n## Week 9: October 25, 2023\n\n## Week 10: November 1, 2023\n\n## Week 11: November 8, 2023\n\n## Week 12: November 15, 2023\n\n## Week 13: November 22, 2023\n\n## Week 14: November 29, 2023\n\n## Week 15: December 6, 2023\n\n# Past Updates\n\nThese past updates are in reverse chronological order.\n\n## Week 3: September 13, 2023\n\n### What is due by this week\n\n-   Complete required readings for [week 3](../weeks/week_03.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Complete [Exercise 2](../exercises/exercise_02.html) on `{ggplot2}`\n\n### What is coming up for next week\n\n-   Complete required readings for [week 4](../weeks/week_04.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Complete [Exercise 3](../exercises/exercise_03.html) on `{dplyr}`\n    and `{tidyr}`\n\n### Before we start this week\n\n-   I want to set up reminders for due dates. How about calendar\n    invites?\n-   I am considering shifting the exercise due date from Monday to\n    Tuesday. What do you think?\n\n### What are you finding interesting\n\n-   Ease and speed of plotting spatial data\n-   Setting colors for plots using `scale_` functions from `{ggplot}`\n-   Customizing plots using `theme_` functions from `{ggplot}`\n-   Similarities and differences between R and Python\n\n### What are you finding difficult\n\n-   `ggploty()` didn't work as expected\n-   The `countries` dataset from `{rnaturalearth}`\n-   When to use the `summarize()` function\n\n### Your questions this week\n\n-   Questions about `{ggplot2}`\n-   Questions about `{dplyr}`\n-   Other questions\n\n#### `{ggplot2}` questions\n\n-   If you make a plot with `ggplot()`, when do you need to specify\n    data? And when can you leave it out?\n-   Why do some `geom_` functions work with some variables and not\n    others?\n-   What is the difference between `{tmap}` and `{ggplot2}`?\n\n#### `{dplyr}` questions\n\nWe'll cover both of these questions today:\n\n-   What is `distinct()` actually doing?\n-   How do you use the `.before` and `.after` parameters provided for\n    `mutate()` and `relocate()`?\n\n### Other questions\n\nCheck out the Discord for a few answers:\n\n-   Can you use R for machine learning with big data?\n-   How do I access other datasets with the `{rnaturalearth}`?\n\nPlease post your questions to the Discord!\n\n### Things to think about\n\n-   What does it mean for data to be part of a knowledge system?\n\n## Week 2: September 6, 2023\n\n### What is due by this week\n\n-   Set up R, RStudio, and GitHub Desktop\n-   Complete required readings for [week 1](../weeks/week_01.html) and\n    [week 2](../weeks/week_02.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Review [instructions to complete\n    exercises](../course-exercises.html) using RStudio and GitHub\n-   Complete [Exercise 1](../exercises/exercise_01.html) on R basics and\n    the structure of `{sf}` objects\n\n### What is coming up for next week\n\n-   Complete required readings for [week 3](../weeks/week_03.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Complete [Exercise 2](../exercises/exercise_02.html) on `{ggplot2}`\n\n### Before we start this week\n\n-   Do you have access to your GitHub repository? Do you understand how\n    to commit changes?\n-   How can you get the most out of the readings?\n-   How do you customize your settings in RStudio?\n-   Where can you get help if you need it?\n-   What are we doing for the final project?\n\n### Your questions this week\n\n-   Why do some functions require arguments and other functions do not?\n-   What are some of the best ways of sharing reproducible methods?\n-   How do you get data that you create into R?\n-   What is a vector tile? What is the difference between raster and\n    vector tiles?\n-   What does the function `ggplot2::aes()` and the attributes passed to\n    the function really do?\n-   Do you need to re-install your packages every time you start work?\n\nReminder: questions are *required* as part of the weekly check-in.\n\n## Week 1: September 6, 2023\n\n-   Welcome!\n\n### What is due by this week\n\n-   Join the Discord chat\n\n## Week 4: September 20, 2023\n\n### Your questions\n\n![](https://r4ds.hadley.nz/diagrams/data-science/transform.png)\n\n------------------------------------------------------------------------\n\n**How to filter multiple rows from a column?**\n\nIt all depends on the tests or conditions you pass to `filter()`. Review\nthe reading [on the filter\nfunction](https://r4ds.hadley.nz/data-transform#filter) or check out\nthis optional section of R for Data Science on [boolean operations with\nstrings](https://r4ds.hadley.nz/regexps#sec-boolean-operations).\n\n------------------------------------------------------------------------\n\n**How do you set `{tidyselect}` helpers to be case *insensitive*?**\n\n[Check out the\ndocumentation](https://tidyselect.r-lib.org/reference/starts_with.html)!\nLook for the `ignore.case` parameter.\n\n------------------------------------------------------------------------\n\n\"I would love to run through the code for this bar graph in class, since\nI don't totally understand what thought process to use to come up with\nit.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  replace_na(\n    replace = list(arr_delay = 0)\n  ) |> \n  mutate(\n    hour_factor = factor(hour),\n    arr_delay_flag = arr_delay > 5\n  ) |>\n  ggplot(aes(x = hour_factor, fill = arr_delay_flag)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](fall-2023_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n### Interesting things\n\nWe all love `filter()`! We also appreciate `distinct()`\n\n------------------------------------------------------------------------\n\n\"I have been working with R for a while now, in classes and for my own\nresearch. The lecture this week and the exercise really helped me\nunderstand the application of all the tools to transform data, which was\nsuper interesting because I often end up doing selections and filters in\nArcGIS Pro or in a csv.\"\n\n### Difficult things\n\n**Answering this question:** Which carrier has the worst average delays?\n**Challenge:** can you disentangle the effects of bad airports vs. bad\ncarriers? Why/why not?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# flights |>\n#   replace_na(\n#     replace = list(\n#       arr_delay = 0,\n#       dep_delay = 0\n#     )\n#   ) |>\n#   summarise(\n#     n_flights = n(),\n#     n_delay_flights = sum(n > dep_delay),\n#     mean_arr_delay = mean(arr_delay),\n#     mean_dep_delay = mean(dep_delay),\n#     mean_total_delay = mean(arr_delay + dep_delay),\n#     .by = carrier\n#   ) |>\n#   slice_max(order_by = mean_total_delay, n = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  replace_na(\n    replace = list(\n      arr_delay = 0,\n      dep_delay = 0\n    )\n  ) |>\n  summarise(\n    mean_dep_delay = mean(dep_delay),\n    mean_arr_delay = mean(arr_delay),\n    mean_total_delay_diff = mean(dep_delay - arr_delay),\n    mean_total_delay = mean(dep_delay + arr_delay),\n    .by = carrier\n  ) |>\n  arrange(desc(mean_total_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 5\n   carrier mean_dep_delay mean_arr_delay mean_total_delay_diff mean_total_delay\n   <chr>            <dbl>          <dbl>                 <dbl>            <dbl>\n 1 F9               20.1          21.8                  -1.67             41.9 \n 2 FL               18.3          19.6                  -1.28             37.9 \n 3 EV               18.9          14.9                   4.02             33.8 \n 4 YV               17.2          14.1                   3.14             31.3 \n 5 WN               17.4           9.47                  7.97             26.9 \n 6 9E               15.8           6.91                  8.87             22.7 \n 7 B6               12.9           9.36                  3.55             22.3 \n 8 OO               11.4          10.8                   0.594            22.2 \n 9 MQ               10.1          10.2                  -0.161            20.3 \n10 UA               12.0           3.50                  8.46             15.5 \n11 VX               12.8           1.75                 11.0              14.5 \n12 DL                9.20          1.63                  7.57             10.8 \n13 AA                8.42          0.356                 8.06              8.77\n14 US                3.66          2.06                  1.60              5.72\n15 HA                4.90         -6.92                 11.8              -2.01\n16 AS                5.79         -9.86                 15.6              -4.07\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### What is due by this week\n\n-   Complete required readings for [week 4](../weeks/week_04.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Complete [Exercise 3](../exercises/exercise_03.html) on `{dplyr}`\n\n### What is coming up for next week\n\n-   Complete required readings for [week 5](../weeks/week_05.html)\n-   Submit [response to weekly check-in\n    questions](https://forms.gle/PAKvmQX652e5Eois6)\n-   Complete [Exercise 4](../exercises/exercise_03.html) on `{sf}` and\n    `{dplyr}` (and a little `{tidyr}`)\n",
    "supporting": [
      "fall-2023_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}