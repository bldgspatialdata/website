{
  "hash": "eaf34029c8e1c83afc6bb3e7ed46585d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Weekly Updates\"\neditor: visual\ndate: 2024-09-04\nnumber-sections: false\n---\n\n\n\n## Week 9\n\n- Exercise 5 due next Friday, Nov. 1\n- Office hours on Tuesday, Oct. 29\n- Final project proposal due Wednesday, Nov. 13\n- Lessons from McConchie and Boeing\n- Open Street Map Lecture & Practice\n\n### Lessons McConchie (2016)\n\nMcConchie introduces the concept of **map-gardening:** \"the editing tasks that keep OSM going... the things that happen after that fun trailblazing phase of mapping all the streets in your neighborhood.\"\n\nMcConchie asks: \"How do we make sure that OSM is a healthy community that has gardening, has people who enjoy maintenance?\n\n---\n\n\n\n{{< video https://www.youtube.com/watch?v=7sC83j6vzjo >}}\n\n\n\n\n### Lessons from Boeing (2020)\n\nWhy did Boeing make OSMnx open source? Making the tool open source:\n\n-   \"makes empirical work easier to review and reproduce.\"\n-   \"allows anyone else to contribute to the toolâ€™s ongoing development.\"\n-   \"empowers others working in urban science and planning to advance their empirical research on real-world spatial networks with a reusable, accessible, theoretically-sound tool.\"\n\n---\n\nWhy did Boeing use OpenStreetMap data?\n\n-   Google Maps data is unavailable (or un-affordable)\n-   TIGER/Line roads shapefiles don't include topological details\n-   Open Street Map is free and has global coverage\n\n## Week 4\n\n-   Exercise 2 solutions\n-   Data transformation with dplyr\n-   Parsons Problems\n\n### Parsons Problems with {dplyr}\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n  wind > 130\nstorms |>\nfilter(\nlibrary(dplyr)\n  year == 2010,\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nslice_head(n = 10)\nlibrary(dplyr)\narrange(desc(wind_load)) |>\ndistinct(year, name, .keep_all = TRUE) |>\nstorms |>\nmutate(wind_load = pressure * wind^2) |>\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nggplot(aes(x = category, y = avg_wind)) +\nstorms |>\nsummarise(avg_wind = mean(wind)) |>\nlibrary(tidyverse)\nfilter(!is.na(category)) |>\ngeom_point()\ngroup_by(category) |>\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Week 3\n\n-   Exercise submission process\n-   Exercise 1 solutions\n-   Mapping with ggplot2\n-   Data transformation with dplyr\n-   Questions\n\n## Week 2\n\n-   Syllabus updates\n-   Cheat sheets\n-   Check-in on exercise 1 and GitHub Classroom\n-   Week 2 in-class quiz\n-   Visualizing spatial data with ggplot2\n\n### Syllabus updates\n\n-   In-class exercises\n-   No class on November 27\n\n## Cheat sheets\n\n-   RStudio\n-   sf\n-   ggplot2\n",
    "supporting": [
      "fall-2024_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}