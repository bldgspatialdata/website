{
  "hash": "d3f470e2f3b20fb0a8525478884abab2",
  "result": {
    "engine": "knitr",
    "markdown": "---\norder: 7\ntitle: \"Writing functions and pipelines\"\nsubtitle: \"Session {{< meta order >}}\"\nimage: images/rforecology_functions-graphic.png\n---\n\n\n\n# Functions\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![How to create a custom function in R](images/rforecology_functions-graphic.png){.r-stretch}\n\n::: footer\nSource: [How to create your own function in R](https://www.rforecology.com/post/how-to-create-your-own-function-in-r/) (R for Ecology)\n\n:::\n\n### Why functions?\n\n1.  Make your code easier to understand\n2.  Update code in one place, instead of many\n3.  Reduce chance of making copy and paste mistakes\n4.  Reuse work from project-to-project\n\n### What is refactoring?\n\nRefactoring is the process of making code:\n\n- easier to understand\n- cheaper to modify\n\n...without changing behavior.\n\n::: footer\nSource: [Code Smells and Feels](https://github.com/jennybc/code-smells-and-feels) (2018)\n:::\n\n### Types of functions\n\n1.  **Vector functions** take one or more vectors as input and return a vector as output.\n2.  **Data frame functions** take a data frame as input and return a data frame as output.\n3.  **Plot functions** that take a data frame as input and return a plot as output.\n\n### Writing a function\n\n-   Look for repeated sections of code.\n-   What parts are constant?\n-   What parts vary?\n\n### Writing a function\n\nTo turn code into a function you need three things:\n\n1.  A name.\n2.  The arguments.\n3.  The body.\n\n### Writing a function\n\nTo turn code into a function you need three things:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- function(arguments) {\n  body\n}\n```\n:::\n\n\n\n### Writing a function\n\nAdapted from [the tidyverse style guide](https://style.tidyverse.org/functions.html):\n\n1.  Naming functions\n2.  Formatting functions\n3.  Using `return()`\n4.  Using comments\n\n### Naming functions\n\nStrive to use verbs for function names:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nadd_row()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in add_row(): argument \".data\" is missing, with no default\n```\n\n\n:::\n\n```{.r .cell-code}\npermute()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in permute(): could not find function \"permute\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Bad\nrow_adder()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in row_adder(): could not find function \"row_adder\"\n```\n\n\n:::\n\n```{.r .cell-code}\npermutation()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in permutation(): could not find function \"permutation\"\n```\n\n\n:::\n:::\n\n\n\n::: footer\nSource: [Functions](https://style.tidyverse.org/functions.html#naming) from [The tidyverse style guide](https://style.tidyverse.org/index.html).\n:::\n\n### Using `return()`\n\nOnly use `return()` for early returns.\n\nUse early returns to avoid `else` and \"nested\" logic.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nis_it_wednesday <- function(x) {\n  wday <- wday(x, label = TRUE)\n\n  if (identical(wday, \"Wed\")) {\n    return(\"Yes!\")\n  }\n\n  \"No...\"\n}\n\n# Bad\nis_it_wednesday <- function(x) {\n  wday <- wday(x, label = TRUE)\n\n  if (identical(wday, \"Wed\")) {\n    return(\"Yes!\")\n  } else {\n    return(\"No...\")\n  }\n}\n```\n:::\n\n\n\n::: footer\nSource: [Functions](https://style.tidyverse.org/functions.html#return) from [The tidyverse style guide](https://style.tidyverse.org/index.html).\n:::\n\n### Using comments\n\nUse comments to explain the \"why\" not the \"what\" or \"how\".\n\n::: footer\nSource: [Functions](https://style.tidyverse.org/functions.html) from [The tidyverse style guide](https://style.tidyverse.org/index.html).\n:::\n\n### Types of vector functions\n\n-   **\"mutate\" functions:** functions that work well inside of `mutate()` and `filter()` because they return an output of the same length as the input.\n-   **summary functions:** functions that return a single value for use in `summarize()`.\n\n### Example of vector functions\n\nIf a function is type-stable it satisfies two conditions:\n\n-   You can predict the output type based only on the input types (not their values).\n\n-   If the function uses ..., the order of arguments in does not affect the output type.\n\n::: footer\nSource: [Type-stability](https://design.tidyverse.org/out-type-stability.html) from [The tidyverse style guide](https://style.tidyverse.org/index.html).\n:::\n\n<!--\n### Refactoring\n\n-->\n\n### Designing a \"tidy\" function\n\nFour guiding principles for the \"tidyverse\":\n\n1.  human centered\n2.  consistent\n3.  composable\n4.  inclusive\n\n::: footer\nFrom [Unifying principles](https://design.tidyverse.org/unifying.html) in [Tidy design principles](https://design.tidyverse.org/) (WIP)\n:::\n\n::: notes\n\nNotes excerpted from Tidy design principles:\n\n1.  It is human centered, i.e. the tidyverse is designed specifically to support the activities of a human data analyst.\n\n2.  It is consistent, so that what you learn about one function or package can be applied to another, and the number of special cases that you need to remember is as small as possible.\n\n3.  It is composable, allowing you to solve complex problems by breaking them down into small pieces, supporting a rapid cycle of exploratory iteration to find the best solution.\n\n4.  It is inclusive, because the tidyverse is not just the collection of packages, but it is also the community of people who use them.\n:::\n\n# Pipelines\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}