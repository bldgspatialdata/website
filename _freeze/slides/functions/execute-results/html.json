{
  "hash": "105e827208c1ab17cc6af304a9f4d9ef",
  "result": {
    "markdown": "---\ntitle: \"Session {{< meta order >}}: Working with scripts, functions, and Quarto\"\norder: 7\ndate-meta: 2023-10-11\nexecute: \n  error: true\nformat: \n  revealjs:\n    code-link: true\n    scrollable: true\n---\n\n::: {.cell}\n\n:::\n\n\n### Accounting for Methods\n\nThis first part of the lecture is based on the *Accounting for Methods: Spreadsheets, Scripts and Programming Notebooks* chapter by Sam Leon from *The Data Journalism Handbook: Towards A Critical Data Practice.*\n\n------------------------------------------------------------------------\n\nHow you that the sources you have used is reliable and that the work done to derive your conclusions is sound?\n\n::: notes\n\"Reproducibility is widely regarded as a pillar of the modern scientif ic method. It aids in the process of corroborating results and identifying and addressing problematic findings or questionable theories.\"\n:::\n\n------------------------------------------------------------------------\n\n*What is the issue?*\n\nCommon tools like Excel \"[hide] much of the process of working with data by design.\"\n\n------------------------------------------------------------------------\n\n*What is the alternative?*\n\nLiterate programming: \"an approach to writing computer code where the author intersperses code with ordinary human language explaining the steps taken.\"\n\n------------------------------------------------------------------------\n\n> The practitioner of literate programming can be regarded as an essayist, whose main concern is with exposition and excellence of style. Such an author, with thesaurus in hand, chooses the names of variables carefully and explains what each variable means. (Knuth, 1984)\n\n------------------------------------------------------------------------\n\n> He or she strives for a program that is comprehensible because its concepts have been introduced in an order that is best for human understanding, using a mixture of formal and informal methods that reinforce each other. (Knuth, 1984)\n\n------------------------------------------------------------------------\n\nPublishing code can also aid collaboration between organizations!\n\n## Functions\n\n### Why functions?\n\n1.  Make your code easier to understand\n2.  Update code in one place, instead of many\n3.  Reduce chance of making copy and paste mistakes\n4.  Reuse work from project-to-project\n\n### Types of functions\n\n1.  **Vector functions** take one or more vectors as input and return a vector as output.\n2.  **Data frame functions** take a data frame as input and return a data frame as output.\n3.  **Plot functions** that take a data frame as input and return a plot as output.\n\n### Writing a function\n\n-   Look for repeated sections of code.\n-   What parts are constant?\n-   What parts vary?\n\n### Writing a function\n\nTo turn code into a function you need three things:\n\n1.  A name.\n2.  The arguments.\n3.  The body.\n\n### Writing a function\n\nTo turn code into a function you need three things:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- function(arguments) {\n  body\n}\n```\n:::\n\n\n### Writing a function\n\nAdapted from [the tidyverse style guide](https://style.tidyverse.org/functions.html):\n\n1.  Naming functions\n2.  Formatting functions\n3.  Using `return()`\n4.  Using comments\n\n### Naming functions\n\nStrive to use verbs for function names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nadd_row()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in add_row(): argument \".data\" is missing, with no default\n```\n\n\n:::\n\n```{.r .cell-code}\npermute()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in permute(): could not find function \"permute\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Bad\nrow_adder()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in row_adder(): could not find function \"row_adder\"\n```\n\n\n:::\n\n```{.r .cell-code}\npermutation()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in permutation(): could not find function \"permutation\"\n```\n\n\n:::\n:::\n\n\n### Formatting functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nalphabet <- function(A = 1,\n                     B = 2,\n                     C = 3,\n                     D = 4,\n                     E = 5,\n                     case = \"upper\",\n                     ...) {\n  ...\n}\n\n# Bad\nalphabet <- function(A = 1, B = 2, C = 3, D = 4, E = 5, case = \"upper\", ...) {\n  ...\n}\n```\n:::\n\n\n### Using `return()`\n\nOnly use `return()` for early returns.\n\nUse early returns to avoid `else` and \"nested\" logic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nis_it_wednesday <- function(x) {\n  wday <- wday(x, label = TRUE)\n  \n  if (identical(wday, \"Wed\")) {\n    return(\"Yes!\")\n  }\n  \n  \"No...\"\n}\n\n# Bad\nis_it_wednesday <- function(x) {\n  wday <- wday(x, label = TRUE)\n  \n  if (identical(wday, \"Wed\")) {\n    return(\"Yes!\")\n  } else {\n    return(\"No...\")\n  }\n}\n```\n:::\n\n\n### Using comments\n\nUse comments to explain the \"why\" not the \"what\" or \"how\".\n\n### Types of vector functions\n\n-   **\"mutate\" functions:** functions that work well inside of `mutate()` and `filter()` because they return an output of the same length as the input.\n-   **summary functions:** functions that return a single value for use in `summarize()`.\n\n### Example of vector functions\n\nIf a function is type-stable it satisfies two conditions:\n\n-   You can predict the output type based only on the input types (not their values).\n\n-   If the function uses ..., the order of arguments in does not affect the output type.\n\n### Designing a \"tidy\" function\n\nFour guiding principles for the \"tidyverse\":\n\n1.  human centered\n2.  consistent\n3.  composable\n4.  inclusive\n\n::: notes\n1.  It is human centered, i.e. the tidyverse is designed specifically to support the activities of a human data analyst.\n\n2.  It is consistent, so that what you learn about one function or package can be applied to another, and the number of special cases that you need to remember is as small as possible.\n\n3.  It is composable, allowing you to solve complex problems by breaking them down into small pieces, supporting a rapid cycle of exploratory iteration to find the best solution.\n\n4.  It is inclusive, because the tidyverse is not just the collection of packages, but it is also the community of people who use them.\n:::\n\n### Why Quarto?\n\n1.  communicating to decision-makers\n2.  collaborating with other data scientists\n3.  as a modern-day lab notebook where you can capture not only what you did, but also what you were thinking.\n\nIt contains three important types of content:\n\n1.  An (optional) YAML header surrounded by `---`s.\n2.  Chunks of R code surrounded by ````` ```` `````.\n3.  Text mixed with simple text formatting like `# heading` and `_italics_`.\n\n### What happens when you render a Quarto document?\n\n![](https://r4ds.hadley.nz/images/quarto-flow.png)\n\n::: notes\nWhen you render the document, Quarto sends the `.qmd` file to **knitr**, <https://yihui.org/knitr/>, which executes all of the code chunks and creates a new markdown (`.md`) document which includes the code and its output. The markdown file generated by knitr is then processed by **pandoc**, [https://pandoc.org](https://pandoc.org/), which is responsible for creating the finished file.\n:::\n\n### How do you maximize reproducibility with Quarto?\n\n![](https://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/fig/01-fig4.png)\n\n------------------------------------------------------------------------\n\nhttps://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/08-code-chunks/index.html#key-points\n\n-   Learn how to externally source code `source()`\n\n-   Learn how to modularize your code to make it more reproducible\n\n-   Use a chunk at the beginning of your document to load libraries and data globally to make your document more efficient.\n\n### How do you insert citations into a Quarto document?\n\nWrite a function for calculating the \"roundness\" of a POLYGON geometry. [Take a look at Wikipedia](https://en.wikipedia.org/wiki/Roundness) for details but use the formula:\n\nRoundness = (4π × Area) / Perimeter\\^2\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}