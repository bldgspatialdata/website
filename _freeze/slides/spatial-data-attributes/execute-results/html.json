{
  "hash": "aab8b010bb975f9f05afe7dcf84d7afc",
  "result": {
    "engine": "knitr",
    "markdown": "---\norder: 4\ntitle: \"Creating and manipulating attributes for spatial data\"\n---\n\n\n## Setup\n\nToday, we are going to use the `{tidyverse}` along with `{sf}` and two related packages: `{lwgeom}` and `{units}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(lwgeom)\nlibrary(units)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Getting started\n\nFor this session, we also need some data to look at. We are going to load data from the U.S. Census Bureau using the `{tigris}` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tigris)\noptions(tigris_use_cache = TRUE)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nUse `states()` to load data on U.S. states and `primary_roads()` to load data on U.S. highways:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states <- states()\n\nus_highways <- primary_roads()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Things to remember about spatial data\n\n-   Fields\n-   Objects\n\nCheck out the [Wikipedia article on data models in GIS](https://en.wikipedia.org/wiki/Data_model_(GIS)) for more background on this topic.\n\n## Things to remember about `sf` and `sfc` objects\n\nA `sf` object is a data frame with a `sfc` list-column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states$geometry\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 56 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2311 ymin: -14.60181 xmax: 179.8597 ymax: 71.43979\nGeodetic CRS:  NAD83\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n## Things to remember about `sf` and `sfc` objects\n\n-   a `sf` object is a data frame with a `sfc` list-column\n-   a `sf` object has a `sf_column` attribute (it isn't always named geometry---use `attributes()` to take a look)\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n [1] \"REGION\"   \"DIVISION\" \"STATEFP\"  \"STATENS\"  \"GEOID\"    \"STUSPS\"  \n [7] \"NAME\"     \"LSAD\"     \"MTFCC\"    \"FUNCSTAT\" \"ALAND\"    \"AWATER\"  \n[13] \"INTPTLAT\" \"INTPTLON\" \"geometry\"\n\n$row.names\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n[51] 51 52 53 54 55 56\n\n$class\n[1] \"sf\"         \"data.frame\"\n\n$sf_column\n[1] \"geometry\"\n\n$agr\n  REGION DIVISION  STATEFP  STATENS    GEOID   STUSPS     NAME     LSAD \n    <NA>     <NA>     <NA>     <NA>     <NA>     <NA>     <NA>     <NA> \n   MTFCC FUNCSTAT    ALAND   AWATER INTPTLAT INTPTLON \n    <NA>     <NA>     <NA>     <NA>     <NA>     <NA> \nLevels: constant aggregate identity\n\n$tigris\n[1] \"state\"\n```\n\n\n:::\n:::\n\n\n## Things to remember about `sf` and `sfc` objects\n\n-   a `sf` object is a data frame with a `sfc` list-column\n-   a `sf` object has a `sf_column` attribute (it isn't always named geometry---use `attributes()` to take a look)\n-   `sf` and `sfc` objects use a coordinate reference system\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(us_states$geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n```\n\n\n:::\n:::\n\n\n## Things to remember about `sf` and `sfc` objects\n\n-   a `sf` object is a data frame with a `sfc` list-column\n-   a `sf` object has a `sf_column` attribute (it isn't always named geometry---use `attributes()` to take a look)\n-   `sf` and `sfc` objects use a coordinate reference system\n-   working with `sf` objects is *slower* than working with data frames---so drop the geometry if you don't need it\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_drop_geometry(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   REGION DIVISION STATEFP  STATENS GEOID STUSPS\n1       3        5      54 01779805    54     WV\n2       3        5      12 00294478    12     FL\n3       2        3      17 01779784    17     IL\n4       2        4      27 00662849    27     MN\n5       3        5      24 01714934    24     MD\n6       1        1      44 01219835    44     RI\n7       4        8      16 01779783    16     ID\n8       1        1      33 01779794    33     NH\n9       3        5      37 01027616    37     NC\n10      1        1      50 01779802    50     VT\n11      1        1      09 01779780    09     CT\n12      3        5      10 01779781    10     DE\n13      4        8      35 00897535    35     NM\n14      4        9      06 01779778    06     CA\n15      1        2      34 01779795    34     NJ\n16      2        3      55 01779806    55     WI\n17      4        9      41 01155107    41     OR\n18      2        4      31 01779792    31     NE\n19      1        2      42 01779798    42     PA\n20      4        9      53 01779804    53     WA\n21      3        7      22 01629543    22     LA\n22      3        5      13 01705317    13     GA\n23      3        6      01 01779775    01     AL\n24      4        8      49 01455989    49     UT\n25      2        3      39 01085497    39     OH\n26      3        7      48 01779801    48     TX\n27      4        8      08 01779779    08     CO\n28      3        5      45 01779799    45     SC\n29      3        7      40 01102857    40     OK\n30      3        6      47 01325873    47     TN\n31      4        8      56 01779807    56     WY\n32      4        9      15 01779782    15     HI\n33      2        4      38 01779797    38     ND\n34      3        6      21 01779786    21     KY\n35      9        0      78 01802710    78     VI\n36      9        0      69 01779809    69     MP\n37      9        0      66 01802705    66     GU\n38      1        1      23 01779787    23     ME\n39      1        2      36 01779796    36     NY\n40      4        8      32 01779793    32     NV\n41      4        9      02 01785533    02     AK\n42      9        0      60 01802701    60     AS\n43      2        3      26 01779789    26     MI\n44      3        7      05 00068085    05     AR\n45      3        6      28 01779790    28     MS\n46      2        4      29 01779791    29     MO\n47      4        8      30 00767982    30     MT\n48      2        4      20 00481813    20     KS\n49      2        3      18 00448508    18     IN\n50      9        0      72 01779808    72     PR\n51      2        4      46 01785534    46     SD\n52      1        1      25 00606926    25     MA\n53      3        5      51 01779803    51     VA\n54      3        5      11 01702382    11     DC\n55      2        4      19 01779785    19     IA\n56      4        8      04 01779777    04     AZ\n                                           NAME LSAD MTFCC FUNCSTAT\n1                                 West Virginia   00 G4000        A\n2                                       Florida   00 G4000        A\n3                                      Illinois   00 G4000        A\n4                                     Minnesota   00 G4000        A\n5                                      Maryland   00 G4000        A\n6                                  Rhode Island   00 G4000        A\n7                                         Idaho   00 G4000        A\n8                                 New Hampshire   00 G4000        A\n9                                North Carolina   00 G4000        A\n10                                      Vermont   00 G4000        A\n11                                  Connecticut   00 G4000        A\n12                                     Delaware   00 G4000        A\n13                                   New Mexico   00 G4000        A\n14                                   California   00 G4000        A\n15                                   New Jersey   00 G4000        A\n16                                    Wisconsin   00 G4000        A\n17                                       Oregon   00 G4000        A\n18                                     Nebraska   00 G4000        A\n19                                 Pennsylvania   00 G4000        A\n20                                   Washington   00 G4000        A\n21                                    Louisiana   00 G4000        A\n22                                      Georgia   00 G4000        A\n23                                      Alabama   00 G4000        A\n24                                         Utah   00 G4000        A\n25                                         Ohio   00 G4000        A\n26                                        Texas   00 G4000        A\n27                                     Colorado   00 G4000        A\n28                               South Carolina   00 G4000        A\n29                                     Oklahoma   00 G4000        A\n30                                    Tennessee   00 G4000        A\n31                                      Wyoming   00 G4000        A\n32                                       Hawaii   00 G4000        A\n33                                 North Dakota   00 G4000        A\n34                                     Kentucky   00 G4000        A\n35                 United States Virgin Islands   00 G4000        A\n36 Commonwealth of the Northern Mariana Islands   00 G4000        A\n37                                         Guam   00 G4000        A\n38                                        Maine   00 G4000        A\n39                                     New York   00 G4000        A\n40                                       Nevada   00 G4000        A\n41                                       Alaska   00 G4000        A\n42                               American Samoa   00 G4000        A\n43                                     Michigan   00 G4000        A\n44                                     Arkansas   00 G4000        A\n45                                  Mississippi   00 G4000        A\n46                                     Missouri   00 G4000        A\n47                                      Montana   00 G4000        A\n48                                       Kansas   00 G4000        A\n49                                      Indiana   00 G4000        A\n50                                  Puerto Rico   00 G4000        A\n51                                 South Dakota   00 G4000        A\n52                                Massachusetts   00 G4000        A\n53                                     Virginia   00 G4000        A\n54                         District of Columbia   00 G4000        A\n55                                         Iowa   00 G4000        A\n56                                      Arizona   00 G4000        A\n          ALAND       AWATER    INTPTLAT     INTPTLON\n1  6.226630e+10    489204185 +38.6472854 -080.6183274\n2  1.389617e+11  45972570361 +28.3989775 -082.5143005\n3  1.437786e+11   6216493488 +40.1028754 -089.1526108\n4  2.062326e+11  18949394733 +46.3159573 -094.1996043\n5  2.515199e+10   6979074857 +38.9466584 -076.6744939\n6  2.677763e+09   1323686988 +41.5964850 -071.5264901\n7  2.140499e+11   2391569647 +44.3484222 -114.5588538\n8  2.319012e+10   1025971768 +43.6726907 -071.5843145\n9  1.259333e+11  13456093195 +35.5397100 -079.1308636\n10 2.387257e+10   1030754609 +44.0589536 -072.6710173\n11 1.254169e+10   1816424193 +41.5798637 -072.7466572\n12 5.046732e+09   1399179670 +38.9985661 -075.4416440\n13 3.141986e+11    726482113 +34.4346843 -106.1316181\n14 4.036718e+11  20293573058 +37.1551773 -119.5434183\n15 1.904892e+10   3533083369 +40.1072744 -074.6652012\n16 1.402923e+11  29343646672 +44.6309071 -089.7093916\n17 2.486284e+11   6170965739 +43.9717125 -120.6229578\n18 1.989574e+11   1371105730 +41.5433053 -099.8118646\n19 1.158818e+11   3397909903 +40.9046013 -077.8275298\n20 1.721190e+11  12548738684 +47.4073238 -120.5757999\n21 1.119153e+11  23736382213 +30.8634368 -091.7987173\n22 1.494866e+11   4418360134 +32.6295789 -083.4235109\n23 1.311755e+11   4591897964 +32.7396323 -086.8434593\n24 2.133551e+11   6529973239 +39.3349925 -111.6563326\n25 1.058237e+11  10274702852 +40.4149297 -082.7119975\n26 6.766816e+11  18978390713 +31.4347032 -099.2818238\n27 2.684188e+11   1185716938 +38.9937669 -105.5087122\n28 7.786620e+10   5074243221 +33.8741776 -080.8542639\n29 1.776642e+11   3373725677 +35.5900815 -097.4867789\n30 1.067920e+11   2322601737 +35.8584600 -086.3496339\n31 2.514587e+11   1867503716 +42.9896591 -107.5443922\n32 1.663415e+10  11777652105 +19.8281671 -155.4950421\n33 1.786943e+11   4414779956 +47.4421740 -100.4608258\n34 1.022830e+11   2367816964 +37.5336844 -085.2929801\n35 3.480219e+08   1550236187 +18.3392359 -064.9500433\n36 4.722925e+08   4644252458 +15.0010865 +145.6181702\n37 5.435558e+08    934337453 +13.4417451 +144.7719021\n38 7.988826e+10  11745102727 +45.4092843 -068.6666160\n39 1.220491e+11  19257128505 +42.9133974 -075.5962723\n40 2.845373e+11   1839636284 +39.3310928 -116.6151469\n41 1.478943e+12 245378425142 +63.3473560 -152.8397334\n42 1.977591e+08   1307243751 -14.2671590 -170.6682674\n43 1.466149e+11 103871870536 +44.8441768 -085.6604907\n44 1.346608e+11   3121950081 +34.8955256 -092.4446262\n45 1.215339e+11   3914344129 +32.6864714 -089.6561377\n46 1.780523e+11   2487445715 +38.3507500 -092.4567826\n47 3.769737e+11   3866634365 +47.0511770 -109.6348174\n48 2.117537e+11   1345767737 +38.4985464 -098.3834298\n49 9.278936e+10   1541248299 +39.9013136 -086.2919129\n50 8.869136e+09   4922143005 +18.2176480 -066.4107992\n51 1.963429e+11   3386737669 +44.4467957 -100.2381762\n52 2.020439e+10   7130660432 +42.1565196 -071.4895915\n53 1.022582e+11   8528040726 +37.5222512 -078.6681938\n54 1.583161e+08     18709762 +38.9042474 -077.0165167\n55 1.446597e+11   1085964740 +42.0700243 -093.4933473\n56 2.943640e+11    855871553 +34.2039362 -111.6063449\n```\n\n\n:::\n:::\n\n\n## Things to remember about coordinate reference systems\n\n-   objects *must* share the same coordinate reference system if you are using them together\n-   coordinate reference systems are stored as attributes for `sfc` and `sf` objects (`sfg` objects don't have a CRS)\n-   coordinate reference systems have *units*\n-   geographic and projected coordinate reference systems are *not* the same\n-   coordinate reference systems can be missing and they can be wrong\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bad: assigning a CRS that doesn't match the geometry\nst_crs(us_states) <- 3857\n\n# good: using st_transform to convert the geometry to a new CRS\nst_transform(us_states, crs = 3857)\n```\n:::\n\n\n------------------------------------------------------------------------\n\nGet the objects into the same CRS before we continue:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states <- st_transform(us_states, crs = 3857)\n\nus_highways <- st_transform(us_highways, crs = 3857)\n```\n:::\n\n\n## Things to think about\n\n-   `sf` objects are *not* the only way to represent spatial data in R\n\n-   If you are working with more than one `sf` or `sfc`, the objects must use the *same* coordinate reference system to use them together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# state\n```\n:::\n\n\n## What is an \"attribute\" in GIS?\n\nWithin a GIS desktop application, an **attribute** may be known as a **field**.\n\nWhen we talk about tidy data frames, an attribute is equivalent to a **variable** which is represented as a **column** in a data frame.\n\n::: notes\nhttps://support.esri.com/en-us/gis-dictionary/attribute\n\n-   \\[data models\\] Nonspatial information about a geographic feature in a GIS, usually stored in a table and linked to the feature by a unique identifier. For example, attributes of a river might include its name, length, and sediment load at a gauging station.\n-   \\[data models\\] In raster datasets, information associated with each unique value of a raster cell.\n-   \\[graphics (map display)\\] Information that specifies how features are displayed and labeled on a map; for example, the graphic attributes of a river might include line thickness, line length, color, and font for labeling.\n:::\n\n------------------------------------------------------------------------\n\n**But!** Feature geometry is also stored as a column.\n\nA single `sfc` object (or list-column) can contain more than one feature (shapefiles can't do this BTW!) using MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, or GEOMETRYCOLLECTION geometry types.\n\n------------------------------------------------------------------------\n\n**And!** Objects in R can also have attributes and these are *not* the same thing as attributes for spatial data. Try not to get them mixed up.\n\n## What is an attribute?\n\nSo (to recap) an *attribute* in GIS can also be called a...\n\n-   ...**field** in a desktop GIS application\n-   ...**variable** in tidy data\n-   ...**column** in a data frame\n\n## What types of attributes exist?\n\nAttributes are \"properties of features ('things') that do not describe the feature's geometry\".\n\nHere are the attributes for `us_states`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(st_drop_geometry(us_states))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 56\nColumns: 14\n$ REGION   <chr> \"3\", \"3\", \"2\", \"2\", \"3\", \"1\", \"4\", \"1\", \"3\", \"1\", \"1\", \"3\", \"…\n$ DIVISION <chr> \"5\", \"5\", \"3\", \"4\", \"5\", \"1\", \"8\", \"1\", \"5\", \"1\", \"1\", \"5\", \"…\n$ STATEFP  <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STATENS  <chr> \"01779805\", \"00294478\", \"01779784\", \"00662849\", \"01714934\", \"…\n$ GEOID    <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STUSPS   <chr> \"WV\", \"FL\", \"IL\", \"MN\", \"MD\", \"RI\", \"ID\", \"NH\", \"NC\", \"VT\", \"…\n$ NAME     <chr> \"West Virginia\", \"Florida\", \"Illinois\", \"Minnesota\", \"Marylan…\n$ LSAD     <chr> \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"…\n$ MTFCC    <chr> \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\"…\n$ FUNCSTAT <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"…\n$ ALAND    <dbl> 62266298634, 138961722096, 143778561906, 206232627084, 251519…\n$ AWATER   <dbl> 489204185, 45972570361, 6216493488, 18949394733, 6979074857, …\n$ INTPTLAT <chr> \"+38.6472854\", \"+28.3989775\", \"+40.1028754\", \"+46.3159573\", \"…\n$ INTPTLON <chr> \"-080.6183274\", \"-082.5143005\", \"-089.1526108\", \"-094.1996043…\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nAttributes can have:\n\n-   **point support:** the value applies to every point *individually*, or\n-   **block support:** the value is a summary for *all* points in the geometry\n\n------------------------------------------------------------------------\n\nThe relationship between attributes and geometry can be described as:\n\n-   **constant:** the value is valid everywhere in or over the geometry\n-   **aggregate:** the value is associated with the entire geometry\n\n------------------------------------------------------------------------\n\nWhat is an example of an attribute with a constant relationship?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 56\nColumns: 15\n$ REGION   <chr> \"3\", \"3\", \"2\", \"2\", \"3\", \"1\", \"4\", \"1\", \"3\", \"1\", \"1\", \"3\", \"…\n$ DIVISION <chr> \"5\", \"5\", \"3\", \"4\", \"5\", \"1\", \"8\", \"1\", \"5\", \"1\", \"1\", \"5\", \"…\n$ STATEFP  <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STATENS  <chr> \"01779805\", \"00294478\", \"01779784\", \"00662849\", \"01714934\", \"…\n$ GEOID    <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STUSPS   <chr> \"WV\", \"FL\", \"IL\", \"MN\", \"MD\", \"RI\", \"ID\", \"NH\", \"NC\", \"VT\", \"…\n$ NAME     <chr> \"West Virginia\", \"Florida\", \"Illinois\", \"Minnesota\", \"Marylan…\n$ LSAD     <chr> \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"…\n$ MTFCC    <chr> \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\"…\n$ FUNCSTAT <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"…\n$ ALAND    <dbl> 62266298634, 138961722096, 143778561906, 206232627084, 251519…\n$ AWATER   <dbl> 489204185, 45972570361, 6216493488, 18949394733, 6979074857, …\n$ INTPTLAT <chr> \"+38.6472854\", \"+28.3989775\", \"+40.1028754\", \"+46.3159573\", \"…\n$ INTPTLON <chr> \"-080.6183274\", \"-082.5143005\", \"-089.1526108\", \"-094.1996043…\n$ geometry <MULTIPOLYGON [m]> MULTIPOLYGON (((-9001123 44..., MULTIPOLYGON (((…\n```\n\n\n:::\n:::\n\n\n::: notes\n-   NAME, REGION, or DIVISION: Yes - every part of a state can still use the same state name\n-   ALAND: No - this is an aggregate value\n-   INTPTLAT: No - this is a summary value\n:::\n\n------------------------------------------------------------------------\n\nWhat is an example with an aggregate relationship?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 56\nColumns: 15\n$ REGION   <chr> \"3\", \"3\", \"2\", \"2\", \"3\", \"1\", \"4\", \"1\", \"3\", \"1\", \"1\", \"3\", \"…\n$ DIVISION <chr> \"5\", \"5\", \"3\", \"4\", \"5\", \"1\", \"8\", \"1\", \"5\", \"1\", \"1\", \"5\", \"…\n$ STATEFP  <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STATENS  <chr> \"01779805\", \"00294478\", \"01779784\", \"00662849\", \"01714934\", \"…\n$ GEOID    <chr> \"54\", \"12\", \"17\", \"27\", \"24\", \"44\", \"16\", \"33\", \"37\", \"50\", \"…\n$ STUSPS   <chr> \"WV\", \"FL\", \"IL\", \"MN\", \"MD\", \"RI\", \"ID\", \"NH\", \"NC\", \"VT\", \"…\n$ NAME     <chr> \"West Virginia\", \"Florida\", \"Illinois\", \"Minnesota\", \"Marylan…\n$ LSAD     <chr> \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"…\n$ MTFCC    <chr> \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\", \"G4000\"…\n$ FUNCSTAT <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"…\n$ ALAND    <dbl> 62266298634, 138961722096, 143778561906, 206232627084, 251519…\n$ AWATER   <dbl> 489204185, 45972570361, 6216493488, 18949394733, 6979074857, …\n$ INTPTLAT <chr> \"+38.6472854\", \"+28.3989775\", \"+40.1028754\", \"+46.3159573\", \"…\n$ INTPTLON <chr> \"-080.6183274\", \"-082.5143005\", \"-089.1526108\", \"-094.1996043…\n$ geometry <MULTIPOLYGON [m]> MULTIPOLYGON (((-9001123 44..., MULTIPOLYGON (((…\n```\n\n\n:::\n:::\n\n\n::: notes\n-   NAME, REGION, or DIVISION: Yes - every part of a state can still use the same state name\n-   ALAND or AWATER: Yes - this is an aggregate value - if the shape of the state changed, the land area would change\n-   INTPTLAT or INTPTLON: Yes - this is a summary value - if the shape of the state changed, the interior latitude/longitude point would change\n\nIllustrates the point: \"A typical property of such variables is that associated geometries come for instance from legislation, observation devices or analysis choices, but not intrinsically from the observed variable.\"\n:::\n\n------------------------------------------------------------------------\n\nAttributes can be:\n\n-   extensive: corresponding to amounts, associated with a physical size (length, area, volume, counts of items)\n-   intensive:\n\n## What is an \"attribute domain\"?\n\n::: notes\n-   \\[data structures\\] In a geodatabase, a mechanism for enforcing data integrity. Attribute domains define what values are allowed in a field in a feature class or nonspatial attribute table. If the features or nonspatial objects have been grouped into subtypes, different attribute domains can be assigned to each of the subtypes.\n:::\n\n## What are we working with?\n\nWhen we do data analysis using `{dplyr}`, there are three types of functions we use most often:\n\n-   Boolean operators or predicates\n-   Window or vector functions\n-   Summary or analysis functions\n\nThere are similar\n\n## Predicate functions for geometries with `{sf}`\n\n`{sf}` includes \"vectorized\" logical operators or tests that work with geometry including:\n\n-   `st_is()`\n-   `st_is_valid()`\n-   `st_is_empty()`\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is(us_states, \"POLYGON\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nst_is(us_states, \"MULTIPOLYGON\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\n## Predicate functions for geometries with `{sf}`\n\n`{sf}` also includes more than a dozen predicate functions for working with *pairs* of simple geometries including:\n\n-   `st_intersects`\n-   `st_disjoint`\n-   `st_contains`\n-   `st_covers`\n-   `st_is_within_distance`\n\n## Using predicate functions for spatial joins and filters\n\n`st_filter()` and `st_join()` are two functions that rely on these predicate functions to work.\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaryland <- filter(us_states, NAME == \"Maryland\")\n\nst_filter(us_highways, maryland)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 471 features and 4 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -8881626 ymin: 4621400 xmax: -8367444 ymax: 4897471\nProjected CRS: WGS 84 / Pseudo-Mercator\nFirst 10 features:\n        LINEARID      FULLNAME RTTYP MTFCC                       geometry\n1  1104258795072 Salisbury Byp     M S1100 LINESTRING (-8417144 463654...\n2  1104258845568 Salisbury Byp     M S1100 LINESTRING (-8413964 463644...\n3   110191599447 Salisbury Byp     M S1100 LINESTRING (-8409248 463421...\n4   110191599448 Salisbury Byp     M S1100 LINESTRING (-8419516 462217...\n5  1102149806121 Salisbury Byp     M S1100 LINESTRING (-8412944 463622...\n6  1102149806067 Salisbury Byp     M S1100 LINESTRING (-8412863 463617...\n7  1102149813008 Salisbury Byp     M S1100 LINESTRING (-8412725 463596...\n8  1102166635559 Salisbury Byp     M S1100 LINESTRING (-8412583 463576...\n9  1104258795090 Salisbury Byp     M S1100 LINESTRING (-8416214 463670...\n10 1103075320064 Salisbury Byp     M S1100 LINESTRING (-8414039 463644...\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_filter(us_states, maryland, .predicate = st_disjoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 50 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\nFirst 10 features:\n   REGION DIVISION STATEFP  STATENS GEOID STUSPS           NAME LSAD MTFCC\n1       3        5      12 00294478    12     FL        Florida   00 G4000\n2       2        3      17 01779784    17     IL       Illinois   00 G4000\n3       2        4      27 00662849    27     MN      Minnesota   00 G4000\n4       1        1      44 01219835    44     RI   Rhode Island   00 G4000\n5       4        8      16 01779783    16     ID          Idaho   00 G4000\n6       1        1      33 01779794    33     NH  New Hampshire   00 G4000\n7       3        5      37 01027616    37     NC North Carolina   00 G4000\n8       1        1      50 01779802    50     VT        Vermont   00 G4000\n9       1        1      09 01779780    09     CT    Connecticut   00 G4000\n10      4        8      35 00897535    35     NM     New Mexico   00 G4000\n   FUNCSTAT        ALAND      AWATER    INTPTLAT     INTPTLON\n1         A 138961722096 45972570361 +28.3989775 -082.5143005\n2         A 143778561906  6216493488 +40.1028754 -089.1526108\n3         A 206232627084 18949394733 +46.3159573 -094.1996043\n4         A   2677763359  1323686988 +41.5964850 -071.5264901\n5         A 214049931578  2391569647 +44.3484222 -114.5588538\n6         A  23190115212  1025971768 +43.6726907 -071.5843145\n7         A 125933327733 13456093195 +35.5397100 -079.1308636\n8         A  23872569964  1030754609 +44.0589536 -072.6710173\n9         A  12541690473  1816424193 +41.5798637 -072.7466572\n10        A 314198560947   726482113 +34.4346843 -106.1316181\n                         geometry\n1  MULTIPOLYGON (((-9251622 28...\n2  MULTIPOLYGON (((-9926591 44...\n3  MULTIPOLYGON (((-10324402 5...\n4  MULTIPOLYGON (((-7979248 50...\n5  MULTIPOLYGON (((-12361526 5...\n6  MULTIPOLYGON (((-7931011 52...\n7  MULTIPOLYGON (((-8562247 43...\n8  MULTIPOLYGON (((-8063385 53...\n9  MULTIPOLYGON (((-8073769 50...\n10 MULTIPOLYGON (((-11671597 3...\n```\n\n\n:::\n:::\n\n\n## Creating new variables with geometry\n\n-   Measuring feature geometries\n-   Comparing feature geometries\n-   Joining data based on feature geometries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaryland <- filter(us_states, NAME == \"Maryland\")\n```\n:::\n\n\n## Measuring geometries with `{sf}`\n\n## Measuring geometries with `{sf}`\n\n`{sf}` includes a few different functions for measuring geometries:\n\n-   `st_area()` (only works with POLYGON and MULTIPOLYGON geometries)\n-   `st_length()` (only wrks with LINESTRING and MULTILINSTRING geometries)\n-   `st_distance()` (requires a pair of objects)\n\n## Measuring geometries with `{sf}`\n\nAll of these functions are *vectorized* meaning that they can operate independently on each feature in a `sf` or `sfc` object.\n\nThey support both `sf` inputs (data frames) *and* `sfc` inputs (lists)---but they always return a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_area(maryland)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n53204014221 [m^2]\n```\n\n\n:::\n\n```{.r .cell-code}\nst_area(maryland$geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n53204014221 [m^2]\n```\n\n\n:::\n:::\n\n\n## Measuring geometries with `{sf}`\n\nBut, remember, `dplyr::mutate()` is designed to work with vectorized functions so you can do us a measurement function inside `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaryland |>\n  mutate(\n    area = st_area(geometry)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8848525 ymin: 4563419 xmax: -8347435 ymax: 4825776\nProjected CRS: WGS 84 / Pseudo-Mercator\n  REGION DIVISION STATEFP  STATENS GEOID STUSPS     NAME LSAD MTFCC FUNCSTAT\n1      3        5      24 01714934    24     MD Maryland   00 G4000        A\n        ALAND     AWATER    INTPTLAT     INTPTLON\n1 25151992308 6979074857 +38.9466584 -076.6744939\n                        geometry              area\n1 MULTIPOLYGON (((-8434299 47... 53204014221 [m^2]\n```\n\n\n:::\n:::\n\n\n## Measuring geometries with `{sf}`\n\nYou can even work with multiple geometries using this same approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  mutate(\n    area = st_area(geometry),\n    distance_to_maryland = st_distance(geometry, maryland)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 56 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\nFirst 10 features:\n   REGION DIVISION STATEFP  STATENS GEOID STUSPS           NAME LSAD MTFCC\n1       3        5      54 01779805    54     WV  West Virginia   00 G4000\n2       3        5      12 00294478    12     FL        Florida   00 G4000\n3       2        3      17 01779784    17     IL       Illinois   00 G4000\n4       2        4      27 00662849    27     MN      Minnesota   00 G4000\n5       3        5      24 01714934    24     MD       Maryland   00 G4000\n6       1        1      44 01219835    44     RI   Rhode Island   00 G4000\n7       4        8      16 01779783    16     ID          Idaho   00 G4000\n8       1        1      33 01779794    33     NH  New Hampshire   00 G4000\n9       3        5      37 01027616    37     NC North Carolina   00 G4000\n10      1        1      50 01779802    50     VT        Vermont   00 G4000\n   FUNCSTAT        ALAND      AWATER    INTPTLAT     INTPTLON\n1         A  62266298634   489204185 +38.6472854 -080.6183274\n2         A 138961722096 45972570361 +28.3989775 -082.5143005\n3         A 143778561906  6216493488 +40.1028754 -089.1526108\n4         A 206232627084 18949394733 +46.3159573 -094.1996043\n5         A  25151992308  6979074857 +38.9466584 -076.6744939\n6         A   2677763359  1323686988 +41.5964850 -071.5264901\n7         A 214049931578  2391569647 +44.3484222 -114.5588538\n8         A  23190115212  1025971768 +43.6726907 -071.5843145\n9         A 125933327733 13456093195 +35.5397100 -079.1308636\n10        A  23872569964  1030754609 +44.0589536 -072.6710173\n                         geometry               area distance_to_maryland\n1  MULTIPOLYGON (((-9001123 44... 103045932411 [m^2]              0.0 [m]\n2  MULTIPOLYGON (((-9251622 28... 240290408316 [m^2]        1122737.0 [m]\n3  MULTIPOLYGON (((-9926591 44... 257089838319 [m^2]         893538.7 [m]\n4  MULTIPOLYGON (((-10324402 5... 473223859874 [m^2]        1423100.6 [m]\n5  MULTIPOLYGON (((-8434299 47...  53204014221 [m^2]              0.0 [m]\n6  MULTIPOLYGON (((-7979248 50...   7160497121 [m^2]         490274.7 [m]\n7  MULTIPOLYGON (((-12361526 5... 424675068451 [m^2]        3530363.1 [m]\n8  MULTIPOLYGON (((-7931011 52...  46326405218 [m^2]         579065.3 [m]\n9  MULTIPOLYGON (((-8562247 43... 210941928191 [m^2]         186785.1 [m]\n10 MULTIPOLYGON (((-8063385 53...  48271922011 [m^2]         527897.6 [m]\n```\n\n\n:::\n:::\n\n\nThis works to aggregate features by division:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  group_by(DIVISION) |>\n  summarise(\n    n_states = n_distinct(NAME)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\n# A tibble: 10 × 3\n   DIVISION n_states                                                    geometry\n   <chr>       <int>                                              <GEOMETRY [m]>\n 1 0               5 MULTIPOLYGON (((-18726019 -1633065, -18725998 -1633025, -1…\n 2 1               6 MULTIPOLYGON (((-7978692 5038758, -7978581 5039616, -79783…\n 3 2               3 POLYGON ((-8290777 4763109, -8291389 4762454, -8291849 476…\n 4 3               5 POLYGON ((-9926785 4448353, -9926789 4448327, -9926792 444…\n 5 4               7 POLYGON ((-10176807 4921011, -10176847 4920961, -10177047 …\n 6 5               9 MULTIPOLYGON (((-9250560 2835330, -9249947 2836819, -92493…\n 7 6               4 POLYGON ((-9840190 3523448, -9841106 3523126, -9842801 352…\n 8 7               4 POLYGON ((-9958183 3524892, -9957969 3524935, -9957739 352…\n 9 8               8 POLYGON ((-11671608 3763365, -11671634 3763365, -11672322 …\n10 9               5 MULTIPOLYGON (((-19000283 2939831, -19000200 2940106, -190…\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  group_by(DIVISION) |>\n  summarise(\n    n_states = n_distinct(NAME)\n  ) |>\n  ggplot() +\n  geom_sf(aes(fill = DIVISION)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](spatial-data-attributes_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nThis doesn't entirely work (yet):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  group_by(DIVISION) |>\n  summarise(\n    n_states = n_distinct(NAME) # ,\n    # .by = DIVISION\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\n# A tibble: 10 × 3\n   DIVISION n_states                                                    geometry\n   <chr>       <int>                                              <GEOMETRY [m]>\n 1 0               5 MULTIPOLYGON (((-18726019 -1633065, -18725998 -1633025, -1…\n 2 1               6 MULTIPOLYGON (((-7978692 5038758, -7978581 5039616, -79783…\n 3 2               3 POLYGON ((-8290777 4763109, -8291389 4762454, -8291849 476…\n 4 3               5 POLYGON ((-9926785 4448353, -9926789 4448327, -9926792 444…\n 5 4               7 POLYGON ((-10176807 4921011, -10176847 4920961, -10177047 …\n 6 5               9 MULTIPOLYGON (((-9250560 2835330, -9249947 2836819, -92493…\n 7 6               4 POLYGON ((-9840190 3523448, -9841106 3523126, -9842801 352…\n 8 7               4 POLYGON ((-9958183 3524892, -9957969 3524935, -9957739 352…\n 9 8               8 POLYGON ((-11671608 3763365, -11671634 3763365, -11672322 …\n10 9               5 MULTIPOLYGON (((-19000283 2939831, -19000200 2940106, -190…\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nBut *this* (explicitly unioning the geometry) does work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  summarise(\n    n_states = n_distinct(NAME),\n    geometry = st_union(geometry),\n    .by = DIVISION\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\n   DIVISION n_states                       geometry\n1         5        9 MULTIPOLYGON (((-9250560 28...\n2         3        5 POLYGON ((-9926785 4448353,...\n3         4        7 POLYGON ((-10176807 4921011...\n4         1        6 MULTIPOLYGON (((-7978692 50...\n5         8        8 POLYGON ((-11671608 3763365...\n6         9        5 MULTIPOLYGON (((-19000283 2...\n7         2        3 POLYGON ((-8290777 4763109,...\n8         7        4 POLYGON ((-9958183 3524892,...\n9         6        4 POLYGON ((-9840190 3523448,...\n10        0        5 MULTIPOLYGON (((-18726019 -...\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  group_by(DIVISION) |>\n  summarise(\n    n_states = n_distinct(NAME),\n    geometry = st_union(geometry)\n  ) |>\n  st_as_sf() |>\n  ggplot() +\n  geom_sf(aes(fill = DIVISION)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](spatial-data-attributes_files/figure-revealjs/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n## Measuring geometries with `{sf}`\n\nNot all functions work with all geometry types!\n\n-   `st_area()` only works with POLYGON and MULTIPOLYGON geometries\n-   `st_length()` only works with LINESTRING and MULTILINSTRING geometries\n\n## Measuring geometries with `{sf}`\n\n-   `st_distance()` requires at least two objects\n\n## Measuring geometries with `{lwgeom}` and `{geosphere}`\n\n-   `lwgeom::st_perimeter()`\n-   `geosphere::bearing()`\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states |>\n  group_by(DIVISION) |>\n  summarise(\n    n_states = n_distinct(NAME)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -19951910 ymin: -1643353 xmax: 20021890 ymax: 11554350\nProjected CRS: WGS 84 / Pseudo-Mercator\n# A tibble: 10 × 3\n   DIVISION n_states                                                    geometry\n   <chr>       <int>                                              <GEOMETRY [m]>\n 1 0               5 MULTIPOLYGON (((-18726019 -1633065, -18725998 -1633025, -1…\n 2 1               6 MULTIPOLYGON (((-7978692 5038758, -7978581 5039616, -79783…\n 3 2               3 POLYGON ((-8290777 4763109, -8291389 4762454, -8291849 476…\n 4 3               5 POLYGON ((-9926785 4448353, -9926789 4448327, -9926792 444…\n 5 4               7 POLYGON ((-10176807 4921011, -10176847 4920961, -10177047 …\n 6 5               9 MULTIPOLYGON (((-9250560 2835330, -9249947 2836819, -92493…\n 7 6               4 POLYGON ((-9840190 3523448, -9841106 3523126, -9842801 352…\n 8 7               4 POLYGON ((-9958183 3524892, -9957969 3524935, -9957739 352…\n 9 8               8 POLYGON ((-11671608 3763365, -11671634 3763365, -11672322 …\n10 9               5 MULTIPOLYGON (((-19000283 2939831, -19000200 2940106, -190…\n```\n\n\n:::\n:::\n",
    "supporting": [
      "spatial-data-attributes_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}