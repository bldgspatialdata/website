{
  "hash": "77ece16ef27142f8080870f93b7c3161",
  "result": {
    "markdown": "---\ntitle: \"Session {{< meta order >}}: Getting started with spatial data using sf and the tidyverse\"\norder: 1\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Overview\n\n-   What is R?\n-   How does R work with spatial data?\n-   Take a look at `{sf}` and tidyverse in action\n\n## What is R?\n\n::: columns\n::: {.column width=\"70%\"}\nR is best known for as a *statistical* programming language often used in data science and research.\n\nLike Python or C++, R is an **object-oriented, functional programming language** where the base set of features can be extended through open-source packages or libraries.\n:::\n\n::: {.column width=\"30%\"}\n![](images/R_logo.png)\n:::\n:::\n\n::: notes\n> A package is a bundle of code that a generous person has written, tested, and then given away. Most of the time packages are designed to solve a specific problem, so they to pull together functions related to a particular data science problem (e.g., data wrangling, visualisation, inference).\n\nFrom [BasicBasics 2](https://rladiessydney.org/courses/ryouwithme/01-basicbasics-2/) (R-Ladies Sydney)\n:::\n\n### R has been around a while üìú\n\n::: columns\n::: {.column width=\"40%\"}\nR turns 30 years old this month üéÇ\n\nR is based an S---a language created at Bell Labs in 1976 to support exploratory data analysis.\n:::\n\n::: {.column width=\"60%\"}\n![Digital Equipment Corporation VAX 11/780 mainframe computer. Source: Boston Public Library [Copyright Spencer Grant](https://www.digitalcommonwealth.org/search/commonwealth:sn00b088z)](images/14085834343_552d1d3197_h.jpg)\n:::\n:::\n\n::: footer\nS ran on VAX 11/780 computers like the mainframe above.\n:::\n\n::: notes\nR turns 30 years old this month and is based on a language called S first created at Bell Labs in 1976. S ran on machines like this one.\n\nR has included support for a variety of spatial data analysis tasks since 2000.\n\nThe sf package (short for simple features) was first published to CRAN in 2016.\n:::\n\n### R doesn't use a graphical interface ü§ñ\n\n![](images/rstudio-ide-screenshot.png)\n\n::: footer\n[RStudio](https://posit.co/products/open-source/rstudio/) is the most popular IDE for R but some people use [VS Code](https://code.visualstudio.com/docs/languages/r), [radian](https://github.com/randy3k/radian), or a simple text editor.\n:::\n\n::: notes\nUnlike a desktop GIS application, you use it by writing code in a text file---not clicking around a graphical interface. I use an Integrated Development Environment or IDE known as RStudio to write R scripts, develop R packages, and even create presentations like this one.\n\n> With the advent of 'modern' GIS software, most people want to point and click their way through life. That's good, but there is a tremendous amount of flexibility and power waiting for you with the command line.\n\nGary E. Sherman, founder of the Quantum GIS project, explains in Desktop GIS: Mapping the Planet with Open Source Tools\n:::\n\n### R is growing in popularity üìà\n\n![](images/pkg-downloads_08-2018_07-2023.png)\n\n### R is growing in popularity üìà\n\nThe average *daily* downloads for `{sf}` (the most popular package for working with spatial data in R) has grown from just 1,300 in June 2018 to **over 58,000 in June 2023**.\n\n::: notes\nOver the past five years, average number of monthly downloads for sf, the most popular package for working with spatial data in R has grown from just 1,300 in June 2018 to over 58,000 in June 2023.\n\nIt helps that R and RStudio are both free, most packages are open-source, and there are ample free online books and trainings.\n:::\n\n### R is flexible üõ†Ô∏è\n\n::: columns\n::: {.column width=\"60%\"}\nThere can't be packages for everything---but sometimes it feels that way.\n\nPackages let you work with everything from Microsoft Word documents to 3D renderings of digital elevation data to Google Drive to Google Earth Engine.\n:::\n\n::: {.column width=\"40%\"}\n![Created with `{rayshader}`](https://www.rayshader.com/reference/figures/smallhobart.gif){fig-alt=\"Animated loop showing a mountain with lighting from different directions.\"}\n:::\n:::\n\n::: footer\nIf a package doesn't exist already, there are also packages like `{usethis}` or `{devtools}` that help *you* build it.\n:::\n\n## How does R work with spatial data?\n\n::: columns\n::: {.column width=\"65%\"}\nThe `{sf}` package, first published in 2016, is the most popular R package for spatial data.\n\n::: {style=\"font-size: 80%;\"}\nExtension packages include:\n\n-   [lwgeom](https://github.com/r-spatial/lwgeom/) for selected liblwgeom/PostGIS functions\n-   [stars](https://github.com/r-spatial/stars/) for raster data, and raster or vector data cubes (spatial time series)\n-   [sfnetworks](https://luukvdmeer.github.io/sfnetworks/) for geospatial network data\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](https://user-images.githubusercontent.com/520851/34887433-ce1d130e-f7c6-11e7-83fc-d60ad4fae6bd.gif){fig-alt=\"sf package logo\" fig-align=\"center\"}\n\n![](https://luukvdmeer.github.io/sfnetworks/reference/figures/logo.png){fig-alt=\"sfnetworks package logo\" fig-align=\"center\" width=\"200\"}\n:::\n:::\n\n### `{sf}` is built on open source libraries\n\n::: columns\n::: {.column width=\"65%\"}\nLike QGIS, `{sf}` rests on a foundation of open source libraries:\n\n::: {style=\"font-size: 80%;\"}\n-   [SQLite](https://www.sqlite.org/index.html) (a C library that implements a SQL database engine),\n-   [GDAL](https://gdal.org/index.html) (the Geospatial Data Abstraction Library),\n-   [PROJ](https://proj.org/en/9.2/index.html) (a coordinate transformation software library),\n-   and [GEOS](https://libgeos.org/) (a C/C++ library for computational geometry).\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](images/GDALLogoColor.svg){fig-alt=\"GDAL logo\"}\n:::\n:::\n\n### How are `sf` objects organized\n\n::: columns\n::: {.column width=\"40%\"}\n`sf` objects are an implementation of the simple feature standard.\n\nSimple feature objects are a data frame attached to a \"sticky\" geometry column (known as a `sfc` list-column).\n:::\n\n::: {.column width=\"60%\"}\n![Illustration (c) 2018 by [Allison Horst](https://twitter.com/allison_horst/status/1071456081308614656)](images/allison-horst_sf-illustration.jpeg)\n:::\n:::\n\n::: footer\nThe geometry for a `sf` data frame is known as a simple feature collection (`sfc`) object. A `sfc` object is made up of `sfg` objects.\n:::\n\n------------------------------------------------------------------------\n\n-   `sf`, the table (data.frame) with feature attributes and \"sticky\" feature geometries, which **contains**\n-   `sfc`, the list-column with the geometries for each feature (record), which is **composed of**\n\nFrom [Simple Feature for R](https://r-spatial.github.io/sf/articles/sf1.html#how-simple-features-in-r-are-organized)\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n\n```{.r .cell-code}\nnc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 √ó 15\n    AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74\n   <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl>\n 1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10\n 2 0.061      1.23  1827    1827 Alle‚Ä¶ 37005  37005        3   487     0      10\n 3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208\n 4 0.07       2.97  1831    1831 Curr‚Ä¶ 37053  37053       27   508     1     123\n 5 0.153      2.21  1832    1832 Nort‚Ä¶ 37131  37131       66  1421     9    1066\n 6 0.097      1.67  1833    1833 Hert‚Ä¶ 37091  37091       46  1452     7     954\n 7 0.062      1.55  1834    1834 Camd‚Ä¶ 37029  37029       15   286     0     115\n 8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254\n 9 0.118      1.42  1836    1836 Warr‚Ä¶ 37185  37185       93   968     4     748\n10 0.124      1.43  1837    1837 Stok‚Ä¶ 37169  37169       85  1612     1     160\n# ‚Ñπ 90 more rows\n# ‚Ñπ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>,\n#   geometry <MULTIPOLYGON [¬∞]>\n```\n\n\n:::\n:::\n\n\n\n::: footer\n`<-` and `=` both work as **assignment operators** that *assign* an object or the output from a function into a new object.\n:::\n\n------------------------------------------------------------------------\n\nYou can take a look at the geometry (the `sfc` list-column) using `st_geometry()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(nc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 100 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.23989 36.36536, -81.24069 3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-80.45634 36.24256, -80.47639 3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-76.00897 36.3196, -76.01735 36...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-77.21767 36.24098, -77.23461 3...\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n`sfc` objects have attributes for the coordinate reference system (`crs`), bounding box (`bbox`), precision, and number of empty geometries (`n_empty`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(st_geometry(nc))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$n_empty\n[1] 0\n\n$crs\nCoordinate Reference System:\n  User input: NAD27 \n  wkt:\nGEOGCRS[\"NAD27\",\n    DATUM[\"North American Datum 1927\",\n        ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4267]]\n\n$class\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n\n$precision\n[1] 0\n\n$bbox\n     xmin      ymin      xmax      ymax \n-84.32385  33.88199 -75.45698  36.58965 \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n`sfc` objects are composed of `sfg` objects. Each object hold the feature geometry of an individual simple feature.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(nc)[[1]]\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((-81.47276 36.23436, -81.54084 36.27251, -81.56198 36.27359, -81.63306 36.34069, -81.74107 36.39178, -81.69828 36.47178, -81.7028 36.51934, -81.67 36.58965, -81.3453 36.57286, -81.34754 36.53791, -81.32478 36.51368, -81.31332 36.4807, -81.26624 36.43721, -81.26284 36.40504, -81.24069 36.37942, -81.23989 36.36536, -81.26424 36.35241, -81.32899 36.3635, -81.36137 36.35316, -81.36569 36.33905, -81.35413 36.29972, -81.36745 36.2787, -81.40639 36.28505, -81.41233 36.26729, -81.43104 36.26072, -81.45289 36.23959, -81.47276 36.23436)))\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nThe `{sf}` package also includes functions that allow you to build feature geometry from scratch using `st_point()`, `st_linestring()`, and other functions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_point(c(0, 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT (0 1)\n```\n\n\n:::\n\n```{.r .cell-code}\nst_linestring(matrix(c(0, 0, 1, 1), , 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLINESTRING (0 1, 0 1)\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Take a look at `{sf}` and the tidyverse in action\n\nPackages are simple to install:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"sf\", \"ggplot2\", \"dplyr\"))\n```\n:::\n\n\n\nAnd to load:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### tidyverse packages are used for everyday data analyses\n\n![Courtesy [R for Data Science](https://r4ds.hadley.nz/whole-game.html#fig-ds-whole-game)](images/whole-game.png)\n\n------------------------------------------------------------------------\n\n### Import spatial data from a file\n\nUsing the `{sf}` package, you can use `st_read()` to read data into R from a local file, URL, or database:\n\n\n\n::: {.cell name='st_read'}\n\n```{.r .cell-code}\nmd <- st_read(\"files/md_counties.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `md_counties' from data source \n  `/Users/elipousson/Projects/03_teaching/website/slides/files/md_counties.gpkg' \n  using driver `GPKG'\nSimple feature collection with 24 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8848525 ymin: 4563419 xmax: -8347435 ymax: 4825776\nProjected CRS: WGS 84 / Pseudo-Mercator\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nOr, if you drop the geometry, a `sf` object is just like a spreadsheet:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_drop_geometry(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 √ó 17\n   STATEFP COUNTYFP COUNTYNS GEOID NAME       NAMELSAD LSAD  CLASSFP MTFCC CSAFP\n   <chr>   <chr>    <chr>    <chr> <chr>      <chr>    <chr> <chr>   <chr> <chr>\n 1 24      047      01668802 24047 Worcester  Worcest‚Ä¶ 06    H1      G4020 480  \n 2 24      001      01713506 24001 Allegany   Allegan‚Ä¶ 06    H1      G4020 <NA> \n 3 24      510      01702381 24510 Baltimore  Baltimo‚Ä¶ 25    C7      G4020 548  \n 4 24      015      00596115 24015 Cecil      Cecil C‚Ä¶ 06    H1      G4020 428  \n 5 24      005      01695314 24005 Baltimore  Baltimo‚Ä¶ 06    H1      G4020 548  \n 6 24      013      01696228 24013 Carroll    Carroll‚Ä¶ 06    H1      G4020 548  \n 7 24      009      01676636 24009 Calvert    Calvert‚Ä¶ 06    H1      G4020 548  \n 8 24      019      00596495 24019 Dorchester Dorches‚Ä¶ 06    H1      G4020 480  \n 9 24      003      01710958 24003 Anne Arun‚Ä¶ Anne Ar‚Ä¶ 06    H1      G4020 548  \n10 24      021      01711211 24021 Frederick  Frederi‚Ä¶ 06    H1      G4020 548  \n# ‚Ñπ 14 more rows\n# ‚Ñπ 7 more variables: CBSAFP <chr>, METDIVFP <chr>, FUNCSTAT <chr>,\n#   ALAND <dbl>, AWATER <dbl>, INTPTLAT <chr>, INTPTLON <chr>\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nYou can plot data with R's built-in `plot()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(md[, 2])\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: footer\nSquare brackets (`[]`) are an easy way to subset rows and columns.\n:::\n\n------------------------------------------------------------------------\n\nYou can summarize data using the `summary()` function:\n\n\n\n::: {.cell name='summary'}\n\n```{.r .cell-code}\nsummary(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   STATEFP            COUNTYFP           COUNTYNS            GEOID          \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     NAME             NAMELSAD             LSAD             CLASSFP         \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    MTFCC              CSAFP              CBSAFP            METDIVFP        \n Length:24          Length:24          Length:24          Length:24         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   FUNCSTAT             ALAND               AWATER            INTPTLAT        \n Length:24          Min.   :2.096e+08   Min.   :6.336e+06   Length:24         \n Class :character   1st Qu.:8.279e+08   1st Qu.:2.424e+07   Class :character  \n Mode  :character   Median :1.084e+09   Median :2.006e+08   Mode  :character  \n                    Mean   :1.048e+09   Mean   :2.908e+08                     \n                    3rd Qu.:1.222e+09   3rd Qu.:4.559e+08                     \n                    Max.   :1.711e+09   Max.   :1.145e+09                     \n   INTPTLON                    geom   \n Length:24          MULTIPOLYGON :24  \n Class :character   epsg:3857    : 0  \n Mode  :character   +proj=merc...: 0  \n                                      \n                                      \n                                      \n```\n\n\n:::\n:::\n\n\n\n::: footer\nThe `sf` package adds S3 methods for the base `plot()` and `summary()` functions. Learn more about [S3 methods in *Advanced R*](https://adv-r.hadley.nz/s3.html).\n:::\n\n### Using `{sf}` with tidyverse packages\n\n::: columns\n::: {.column width=\"65%\"}\nThe [tidyverse](https://www.tidyverse.org/) family of R packages developed by [Posit](https://posit.co) (formerly known as RStudio) including:\n\n::: {style=\"font-size: 80%;\"}\n-   [ggplot2](https://ggplot2.tidyverse.org/) for making graphics and data visualizations from bar charts to box plots to maps\n-   [dplyr](https://dplyr.tidyverse.org/) for common data manipulation challenges, such as filtering, re-arranging, or summarizing data\n-   [readr](https://readr.tidyverse.org/) for reading rectangular data in a fast and friendly way\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](images/tidyverse-packages.png){fig-alt=\"Tidyverse packages\"}\n:::\n:::\n\n::: notes\nNotably, the development of these packages is supported by Posit---but they are fully open-source and include contributions from quite literally *hundreds* of individual developers (291 for ggplot2 and 260 for dplyr).\n\nsf works well with tidyverse packages and I use them extensively in my own work.\n:::\n\n------------------------------------------------------------------------\n\n### Transform and visualize\n\ntidyverse packages work well with `{sf}` for transforming and visualizing spatial data.\n\n------------------------------------------------------------------------\n\nFor example, we can use `geom_sf()` from `{ggplot2}` to make a simple map:\n\n\n\n::: {.cell name='geom_sf' output-location='slide'}\n\n```{.r .cell-code}\nmd_map <- ggplot(data = md) +\n  geom_sf() +\n  theme_minimal()\n\nmd_map\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\nTake a peek at the values of the data with the `glimpse()` function from `{dplyr}`:\n\n\n\n::: {.cell name='glimpse'}\n\n```{.r .cell-code}\nglimpse(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 24\nColumns: 18\n$ STATEFP  <chr> \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"‚Ä¶\n$ COUNTYFP <chr> \"047\", \"001\", \"510\", \"015\", \"005\", \"013\", \"009\", \"019\", \"003\"‚Ä¶\n$ COUNTYNS <chr> \"01668802\", \"01713506\", \"01702381\", \"00596115\", \"01695314\", \"‚Ä¶\n$ GEOID    <chr> \"24047\", \"24001\", \"24510\", \"24015\", \"24005\", \"24013\", \"24009\"‚Ä¶\n$ NAME     <chr> \"Worcester\", \"Allegany\", \"Baltimore\", \"Cecil\", \"Baltimore\", \"‚Ä¶\n$ NAMELSAD <chr> \"Worcester County\", \"Allegany County\", \"Baltimore city\", \"Cec‚Ä¶\n$ LSAD     <chr> \"06\", \"06\", \"25\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"‚Ä¶\n$ CLASSFP  <chr> \"H1\", \"H1\", \"C7\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"H1\", \"‚Ä¶\n$ MTFCC    <chr> \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\", \"G4020\"‚Ä¶\n$ CSAFP    <chr> \"480\", NA, \"548\", \"428\", \"548\", \"548\", \"548\", \"480\", \"548\", \"‚Ä¶\n$ CBSAFP   <chr> \"41540\", \"19060\", \"12580\", \"37980\", \"12580\", \"12580\", \"47900\"‚Ä¶\n$ METDIVFP <chr> NA, NA, NA, \"48864\", NA, NA, \"47894\", NA, NA, \"23224\", \"47894‚Ä¶\n$ FUNCSTAT <chr> \"A\", \"A\", \"F\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"‚Ä¶\n$ ALAND    <dbl> 1213156434, 1093489884, 209649327, 896912533, 1549740652, 115‚Ä¶\n$ AWATER   <dbl> 586531107, 14710932, 28758743, 185281256, 215957832, 13112464‚Ä¶\n$ INTPTLAT <chr> \"+38.2221332\", \"+39.6123134\", \"+39.3000324\", \"+39.5623537\", \"‚Ä¶\n$ INTPTLON <chr> \"-075.3099315\", \"-078.7031037\", \"-076.6104761\", \"-075.9415852‚Ä¶\n$ geom     <MULTIPOLYGON [m]> MULTIPOLYGON (((-8380505 45..., MULTIPOLYGON (((‚Ä¶\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n#### Using `{sf}` for spatial transformations\n\n::: columns\n::: {.column width=\"60%\"}\n`{sf}` includes a range of spatial transformation functions with names matching the spatial functions of [PostGIS](https://postgis.net/).\n\nTo show how this works, we can get the center of Baltimore City, buffer by 25 miles, and filter intersecting counties.\n:::\n\n::: {.column width=\"40%\"}\n![ST_intersects relationships with different geometry types](images/st_intersects_postgis-intro.png)\n:::\n:::\n\n::: notes\nthat you might usually do [geoprocessing tools from ArcGIS Pro](https://pro.arcgis.com/en/pro-app/latest/tool-reference/main/arcgis-pro-tool-reference.htm) or the [QGIS Processing Toolbox](https://docs.qgis.org/3.28/en/docs/user_manual/processing/toolbox.html) at included with the `{sf}`, `{lwgeom}`, or another R package.\n\n-   Get a center point for Baltimore City with `st_centroid()`\n-   Apply a 25 mile buffer using `st_buffer()` and `as_units()` from the `{units}` package\n-   Filter our original data on Maryland counties with `st_filter()`\n-   Now we can combine our earlier map with the transformed data\n:::\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nbalt_center\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 18\n  STATEFP COUNTYFP COUNTYNS GEOID NAME      NAMELSAD   LSAD  CLASSFP MTFCC CSAFP\n  <chr>   <chr>    <chr>    <chr> <chr>     <chr>      <chr> <chr>   <chr> <chr>\n1 24      510      01702381 24510 Baltimore Baltimore‚Ä¶ 25    C7      G4020 548  \n# ‚Ñπ 8 more variables: CBSAFP <chr>, METDIVFP <chr>, FUNCSTAT <chr>,\n#   ALAND <dbl>, AWATER <dbl>, INTPTLAT <chr>, INTPTLON <chr>, geom <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nbalt_area <- st_buffer(balt_center, dist = as_units(25, \"mi\"))\n\nbalt_area\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 18\n  STATEFP COUNTYFP COUNTYNS GEOID NAME      NAMELSAD   LSAD  CLASSFP MTFCC CSAFP\n  <chr>   <chr>    <chr>    <chr> <chr>     <chr>      <chr> <chr>   <chr> <chr>\n1 24      510      01702381 24510 Baltimore Baltimore‚Ä¶ 25    C7      G4020 548  \n# ‚Ñπ 8 more variables: CBSAFP <chr>, METDIVFP <chr>, FUNCSTAT <chr>,\n#   ALAND <dbl>, AWATER <dbl>, INTPTLAT <chr>, INTPTLON <chr>,\n#   geom <POLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\n#### Using `{sf}` for spatial transformations {auto-animate=\"true\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbalt_center <- st_centroid(md[3, ])\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nbalt_area <- st_buffer(balt_center, dist = as_units(25, \"mi\"))\n\nbalt_area_counties <- st_filter(md, balt_area, .predicate = st_intersects)\n\nbalt_area_counties\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 √ó 18\n  STATEFP COUNTYFP COUNTYNS GEOID NAME        NAMELSAD LSAD  CLASSFP MTFCC CSAFP\n  <chr>   <chr>    <chr>    <chr> <chr>       <chr>    <chr> <chr>   <chr> <chr>\n1 24      510      01702381 24510 Baltimore   Baltimo‚Ä¶ 25    C7      G4020 548  \n2 24      005      01695314 24005 Baltimore   Baltimo‚Ä¶ 06    H1      G4020 548  \n3 24      013      01696228 24013 Carroll     Carroll‚Ä¶ 06    H1      G4020 548  \n4 24      003      01710958 24003 Anne Arund‚Ä¶ Anne Ar‚Ä¶ 06    H1      G4020 548  \n5 24      033      01714670 24033 Prince Geo‚Ä¶ Prince ‚Ä¶ 06    H1      G4020 548  \n6 24      027      01709077 24027 Howard      Howard ‚Ä¶ 06    H1      G4020 548  \n7 24      031      01712500 24031 Montgomery  Montgom‚Ä¶ 06    H1      G4020 548  \n8 24      025      01698178 24025 Harford     Harford‚Ä¶ 06    H1      G4020 548  \n9 24      029      00593907 24029 Kent        Kent Co‚Ä¶ 06    H1      G4020 <NA> \n# ‚Ñπ 8 more variables: CBSAFP <chr>, METDIVFP <chr>, FUNCSTAT <chr>,\n#   ALAND <dbl>, AWATER <dbl>, INTPTLAT <chr>, INTPTLON <chr>,\n#   geom <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\n#### Using `{sf}` for spatial transformations\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = md) +\n  geom_sf() +\n  geom_sf(data = balt_area_counties, fill = \"darkorange\", alpha = 0.4) +\n  geom_sf(data = balt_area, color = \"orange\", fill = NA, linewidth = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n::: notes\nVisual checks remain an important part of a workflow even when using a non-graphical interface. Map the data to see the results.\n:::\n\n## Related resources\n\n-   Week 1 [Required readings](https://bldgspatialdata.github.io/website/weeks/week_01.html#required-readings) and [Optional readings](https://bldgspatialdata.github.io/website/weeks/week_01.html#optional-readings)\n-   [Exercise 1](https://bldgspatialdata.github.io/website/exercises/exercise_01.html)\n",
    "supporting": [
      "spatial-data_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}