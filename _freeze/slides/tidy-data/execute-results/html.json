{
  "hash": "336c3764e7330017cbe0cc5edaa9d822",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidying and joining data\"\nsubtitle: \"Session {{< meta order >}}\"\norder: 2\ndate: 2023-10-04\nimage: \"images/r4ds_tidy-1.png\"\nexecute: \n  error: true\nformat: \n  revealjs:\n    code-link: true\n    output-location: column-fragment\n    scrollable: true\n---\n\n\n\n\n------------------------------------------------------------------------\n\nCategories of functions in `{tidyr}`:\n\n1.  **Pivoting**\n2.  **Rectangling**\n3.  **Nesting and unnesting**\n4.  **Splitting and combining character columns**\n5.  **Handling missing values**\n\n::: notes\nFrom https://tidyr.tidyverse.org/#getting-started\n\n\"Pivoting\" which converts between long and wide forms. tidyr 1.0.0 introduces pivot_longer() and pivot_wider(), replacing the older spread() and gather() functions. See vignette(\"pivot\") for more details.\n\n\"Rectangling\", which turns deeply nested lists (as from JSON) into tidy tibbles. See unnest_longer(), unnest_wider(), hoist(), and vignette(\"rectangle\") for more details.\n\nNesting converts grouped data to a form where each group becomes a single row containing a nested data frame, and unnesting does the opposite. See nest(), unnest(), and vignette(\"nest\") for more details.\n\nSplitting and combining character columns. Use separate() and extract() to pull a single character column into multiple columns; use unite() to combine multiple columns into a single character column.\n\nMake implicit missing values explicit with complete(); make explicit missing values implicit with drop_na(); replace missing values with next/previous value with fill(), or a known value with replace_na().\n:::\n\n## What is involved in tidying messy datasets?\n\n-   Column headers are values, not variable names\n-   Multiple variables stored in one column\n-   Variables are stored in both rows and columns\n-   Multiple types in one table\n-   One type in multiple tables\n\n::: notes\nfrom Tidy data vignette https://tidyr.tidyverse.org/articles/tidy-data.html\n:::\n\n## Pivoting\n\n## How would this look if we turn it into tidy data?\n\n| City                | 2000   | 2010   | 2020   |\n|--------------------------|--------|--------|--------|\n| Baltimore city, Maryland | 300000 | 290000 | 285000 |\n| Washington, DC           | 300000 | 315000 | 330000 |\n| Richmond, Virginia       | 200000 | 202000 | 210000 |\n\n------------------------------------------------------------------------\n\n| City                | Year | Value  |\n|--------------------------|------|--------|\n| Baltimore city, Maryland | 2000 | 300000 |\n| Baltimore city, Maryland | 2010 | 290000 |\n| Baltimore city, Maryland | 2020 | 285000 |\n\n...\n\n------------------------------------------------------------------------\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(\n  cols = !any_of(\"City\"),\n  names_to = \"Year\",\n  values_to = \"Value\"\n)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Tidying messy datasets\n\n-   Column headers are values, not variable names\n-   Multiple variables stored in one column\n-   Variables are stored in both rows and columns\n-   Multiple types in one table\n-   One type in multiple tables\n\n------------------------------------------------------------------------\n\n## How would this look if we turn it into tidy data?\n\n| City name                | 2000   | 2010   | 2020   |\n|--------------------------|--------|--------|--------|\n| Baltimore city, Maryland | 300000 | 290000 | 285000 |\n| Washington, DC           | 300000 | 315000 | 330000 |\n| Richmond, Virginia       | 200000 | 202000 | 210000 |\n\n------------------------------------------------------------------------\n\n| City           | State    | Year | Value  |\n|----------------|----------|------|--------|\n| Baltimore city | Maryland | 2000 | 300000 |\n| Washington     | DC       | 2000 | 300000 |\n| Richmond       | Virginia | 2000 | 200000 |\n\n...\n\n------------------------------------------------------------------------\n\n## Data organization in spreadsheets\n\n### What are the benefits of careful data organization in spreadsheets?\n\n- reduce errors\n- ease later analyses\n\n### What are the practical approaches for data organization in spreadsheets?\n\n1. be consistent,\n2. write dates like YYYY-MM-DD,\n3. do not leave any cells empty, \n4. put just one thing in a cell,\n5. organize the data as a single rectangle (with subjects as rows and variables as columns, and with a single header row),\n6. create a data dictionary,\n7. do not include calculations in the raw data files,\n8. do not use font color or highlighting as data,\n9. choose good names for things,\n10. make backups, \n11. use data validation to avoid data entry errors,\n12. and save the data in plain text files.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}