---
title: "Exercise 01"
subtitle: "Coding basics and exploring `sf` objects"
order: 1
status: Available
date-due: 2023-09-04
date-modified: last-modified
---

::: {.callout-important appearance="minimal" icon="true"}
Exercise due on {{< meta date-due >}}
:::

ℹ️ See [week {{< meta order >}}](https://bldgspatialdata.github.io/website/weeks/week_0{{< meta order >}}.html) for related slides and readings

::: {.callout-tip collapse="false" appearance="default" icon="true"}
## Practice these skills

-   Confirm that you understand some coding basics
-   Use the `?` operator to access function and package documentation
-   Use `class()`, `names()`, `attributes()`, and `summary()` functions to explore `sf` and `sfc` objects
-   Use the base `plot()` or `ggplot2::geom_sf()` function to visualize a `sf` object
-   Bonus: use the `mapview::mapview()` function to look at data using an interactive map
:::

::: {.callout-note collapse="false" appearance="default" icon="true"}
## Think about these questions

-   What are parts of a simple feature object? What may be some benefits or limitations of this data structure?
-   What about using R helps with "reproducibility" compared to a desktop GIS?
:::

----

## Setup

To complete this exercise, you need to load two libraries that we already installed in class:

```{r}
#| eval: true
#| message: false
library(sf)
library(ggplot2)
```

You also need data from the `{sf}` package:

```{r}
#| eval: true
nc <- st_read(system.file("shape/nc.shp", package = "sf"), as_tibble = TRUE)
```

You *will* need the `{mapview}` and `{spData}` packages but don't load them yet. If they aren't installed, install them now using `{pak}` (a faster option than `install.packages()`).

Copy the following lines (without the `#` character) into the console to install all three packages (don't forget to restart your session afterwards):

```{r}
# install.packages("pak")
# pak::pkg_install(c("mapview", "spData"))
```

This week's exercise is mostly "fill in the blank" questions and coding exercises. You can expect fewer hints and more freedom to experiment in future exercises!

## Exercises

### Coding basics

*The exercises in this section are from [Ch. 3 Workflow: basics](https://r4ds.hadley.nz/workflow-basics.html) in R for Data Science (2e). If you have any trouble with the next couple exercises, please review the chapter before continuing to the next section.*

Why does this code not work? ____

```{r}
my_variable <- 10
my_varıable
```

------------------------------------------------------------------------

Tweak each of the following R commands so that they run correctly:

```{r}
libary(todyverse)

ggplot(dTA = mpg) + 
  geom_point(maping = aes(x = displ y = hwy)) +
  geom_smooth(method = "lm)
```

------------------------------------------------------------------------

Press <kbd>⌥ + ⇧ + K</kbd> or <kbd>⎇ + ⇧ + K</kbd>.

What happens? ____

How can you get to the same place using the menus? ____

------------------------------------------------------------------------

### Look up documentation

`?` is an operator that you can use to pull up documentation on a function, dataset, or other topic in the Help tab pane of the [RStudio IDE](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html). For example, running the code: `?sf::st_read` will pull up the documentation on a set of functions for read simple features or layers from a file or database.

Use `?` to access the documentation on `sf::st_geometry()` then look for the "Value" heading that provides information about the value returned by the function.

What type of object does `sf::st_geometry()` return? \_\_\_\_

What is one *other* function documented on the same page? \_\_\_\_

::: {.callout-tip collapse="false" appearance="default" icon="true"}
Review [Ch. 9 Workflow: getting help](https://r4ds.hadley.nz/workflow-help) in R for Data Science (2e) for more information about getting help when you struggle with a package, function, or project.
:::

### Explore `sf` and `sfc` objects

Every object in R has at least one class:

```{r}
#| eval: true
class(1)
class("A")
class(TRUE)
```

Vectors, lists, data frames, and other objects can also have names and attributes. This is a named character vector:

```{r}
#| eval: true
names(c("A" = "apple"))
```

A `sf` object is a `data.frame` but it also has a special `sf` class that is [designed to implement the formal simple features](https://r-spatial.github.io/sf/articles/sf1.html) standard in R:

```{r}
#| eval: true
class(nc)
```

As a data frame, a `sf` object has column names (which you can access with `names()` or `colnames()`):

```{r}
#| eval: true
colnames(nc)
```

------------------------------------------------------------------------

Next, we should run `st_geometry()` on `nc`:

```{r}
#| eval: true
nc_geometry <- st_geometry(nc)
```

Now, use `class()` to find out what type of object `st_geometry()` returned:

```{r}
____
```

This object is a special type of list. You can subset one or more items from a list using a single or double set of square brackets like this:

```{r}
#| eval: true
nc_geometry[1]

nc_geometry[[1]]
```

Take a look at the attributes for this list using `attributes()`:

```{r}
____(nc_geometry)
```

Now, use `class()` one more time to find out what type of objects make up `nc_geometry`:

```{r}
____(nc_geometry[[1]])
```

----

`summary()` is another way to get information about names and attributes all at once. Try using `summary()` on `nc_geometry`:

```{r}
summary(____)
```

Review the results and try to answer the following:

-   What is the geometry type? \_\_\_\_
-   What is the coordinate reference system? \_\_\_\_
-   How many features? \_\_\_\_

### Visualize `sf` objects

Some packages come with data we can use as soon as the package is loaded.

Load the `{spData}` packages using `library()` then make a plot of the `us_states` data:

```{r}
library(____)

plot(____)
```

Can you use `plot()` to make a map of states color-coded by region?

```{r}
plot(____)
```

Can you make a map of `us_states` using `ggplot()` and `geom_sf()`?

```{r}
ggplot(data = ____) +
  geom_sf()
```

Can you make a map `us_states` you made with `geom_sf()` and have states are color-coded by total population in 2015?

```{r}
ggplot(data = ____) +
  geom_sf(aes(fill = ____))
```

Take a look at the documentation for `ggplot2::geom_sf()` for examples if you get stuck. You can also use `names()` or `summary()` with `us_states` to find out the column names of the different attributes.

## Bonus exercise

### Interactive mapping

For the bonus exercise, we are using [Maryland Transit Administration Bus Stops](https://data.imap.maryland.gov/datasets/maryland::baltimore-county-maintained-roads/explore) data from Maryland iMap portal. The data is published as an ArcGIS Feature Layer (a type of [Web Map Service](https://en.wikipedia.org/wiki/Web_Map_Service) or WMS). The service allows us to access the data in a few different formats including as a [GeoJSON file](https://en.wikipedia.org/wiki/GeoJSON).

I went ahead and pulled the URL to use for this exercise and got it ready to read with sf by pasting on a ["vsicurl" prefix](https://gdal.org/user/virtual_file_systems.html#vsicurl-http-https-ftp-files-random-access). This prefix tells [GDAL](https://gdal.org/user/virtual_file_systems.html) (the Geospatial Data Abstraction Library) to use a [virtual file system](https://gdal.org/user/virtual_file_systems.html#gdal-virtual-file-systems-compressed-network-hosted-etc-vsimem-vsizip-vsitar-vsicurl) that allows sf to use a URL for a spatial data file as a data source.

```{r}
#| eval: true
dsn <- "https://geodata.md.gov/imap/rest/services/Transportation/MD_Transit/FeatureServer/9/query?outFields=*&where=1%3D1&f=geojson"

dsn <- paste0("/vsicurl/" , dsn)
```


::: {.callout-note collapse="true" appearance="default" icon="true"}
### About GDAL and other sf dependencies
GDAL is one of the major open source projects that "powers" the `{sf}` package along with GEOS, PROJ, and udunits2. Geocomputation with R [explains these dependencies](https://r.geocompx.org/spatial-class#vector-data):

-   [GDAL](https://gdal.org/), for reading, writing and manipulating a wide range of geographic data formats,
-   [PROJ](https://proj.org/), a powerful library for coordinate system transformations
-   [GEOS](https://libgeos.org/), a planar geometry engine for operations such as calculating buffers and centroids on data with a projected CRS
-   [S2](https://s2geometry.io/), a spherical geometry engine written in C++ developed by Google
:::

---

Combine `st_read()` and the assignment operator `<-` to read the URL from `dsn` and create a new `sf` object:

```{r}
bus_stops ____ ____
```

----

Load the `{mapview}` library and then use the `mapview()` function to create an interactive map of the new `bus_stops` object:

```{r}
____

____
```

Explore the documentation for `mapview()` by running `?mapview::mapview` in your console. Read the help page to see how you can customize your interactive map.

If you want a guided tour of the package, check out this [recorded 2020 tutorial on YouTube](https://www.youtube.com/watch?v=hUzVvGezwo8) with Tim Appelhans (who created mapview in 2016 with [grant support from the R Consortium](https://www.r-consortium.org/all-projects/awarded-projects/2016-group-2)).

Can you create another interactive map that is color-coded by one of the attributes in `bus_stops`?

```{r}
_____
```
