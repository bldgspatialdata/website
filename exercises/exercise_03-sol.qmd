---
title: "Exercise 03"
order: 3
status: available
date-due: 2024-09-20
date-modified: last-modified
error: true
---

::: {.callout-important appearance="minimal"}
Exercise due on {{< meta date-due >}}
:::

## Overview

This week's exercise comes directly from [the data transformation
chapter](https://r4ds.hadley.nz/data-transform) of R for Data Science.
More typically, our exercises will always include spatial data but I
wanted to use a more tried and tested exercise for this week's material.

## Setup

If you don't already have the `{nycflights13}` package installed, go ahead and install it then restart before continuing with the exercise.

```{r}
#| eval: false
pak::pkg_install("nycflights13")
```

In addition to nycflights13, you will also need `{dplyr}` and `{ggplot2}`. Load the tidyverse library to make sure you have everything you need:

```{r}
library(tidyverse)
library(nycflights13)
```

## Exercises

### Working with rows

In a single pipeline for each condition, find all flights that meet the
condition:

-   Had an arrival delay of two or more hours

```{r}
flights |> 
  filter(arr_delay >= 120)
```

-   Flew to Houston (`IAH` or `HOU`)

```{r}
flights |> 
  filter(dest %in% c("IAH", "HOU"))
```

-   Were operated by United, American, or Delta

```{r}
flights |> 
  filter(carrier %in% c("UA", "AA", "DL"))
```

-   Departed in summer (July, August, and September)

```{r}
flights |> 
  filter(between(month, 7, 9))
```

-   Arrived more than two hours late, but didn't leave late

```{r}
flights |> 
  filter(arr_delay > 120, dep_delay <= 0)
```

-   Were delayed by at least an hour, but made up over 30 minutes in
    flight

```{r}
flights |> 
  # FIXME: but made up over 30 minutes in flight?
  filter(dep_delay >= 60, (dep_delay - arr_delay) < 30)
```

Sort `flights` to find the flights with longest departure delays. Find
the flights that left earliest in the morning.

```{r}
flights |> 
  arrange(desc(dep_delay))

flights |> 
  arrange(dep_time)
```

Sort `flights` to find the fastest flights. (Hint: Try including a math
calculation inside of your function.)

```{r}
flights |> 
  arrange(distance / air_time)
```

Answer the following questions including code blocks showing the code used in determining your answer.

Was there a flight on every day of 2013? Yes. There are 365 days in a year and 365 distinct month-day combinations in the flight data.

```{r}
flights |> 
  filter(year == 2013) |> 
  distinct(month, day)
```


Which flights traveled the farthest distance?  Flights from JFK to Honolulu airport.

```{r}
flights |> 
  arrange(desc(distance))
```


Which traveled the least distance?  The flight that was scheduled to travel the least distance was a 17 mile flight from the Newark airport (EWR) to La Gaurdia (LGA) but that flight never departed the airport. The flight that actually traveled the least distance was from Newark to Philadelphia Internationalâ€”a distance of 80 miles.

```{r}
flights |> 
  arrange(distance)
```

Does it matter what order you used
[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and
[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if
you're using both? Why/why not? Think about the results and how much
work the functions would have to do.

If `filter()` is applied first, `arrange()` may be faster if it is sorting a smaller number of rows. In either case, however, the output of the combined functions should be identical.

::: callout-tip
Now is a good time to render, commit, and push your changes to GitHub with an informative commit message.

Make sure to commit and push all changed files so that your Git pane is empty afterwards.
:::

### Working with columns

Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you
expect those three numbers to be related?

You would expect `sched_dep_time` + `dep_delay` = `dep_time`.

Brainstorm as many ways as possible to select `dep_time`, `dep_delay`,
`arr_time`, and `arr_delay` from `flights`.

```{r}
select(flights, starts_with("dep"), starts_with("arr"))

select(flights, all_of(c("dep_time", "dep_delay", "arr_time", "arr_delay")))

select(flights, dep_time, dep_delay, arr_time, arr_delay)

select(flights, 4, 6, 7, 9)
```

What happens if you specify the name of the same variable multiple times
in a [`select()`](https://dplyr.tidyverse.org/reference/select.html)
call?

The selected variable only appears once in the output even if it is specified in the selection multiple times.

```{r}
select(flights, dep_time, dep_time)
```

What does the
[`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html)
function do? Why might it be helpful in conjunction with this vector?

```{r}
variables <- c("year", "month", "day", "dep_delay", "arr_delay")

select(flights, any_of(variables))
```

Does the result of running the following code surprise you? How do the
select helpers deal with upper and lower case by default? How can you
change that default?

```{r}
flights |> select(contains("TIME"))

flights |> select(contains("TIME", ignore.case = FALSE))
```

Rename `air_time` to `air_time_min` to indicate units of measurement and
move it to the beginning of the data frame.

```{r}
flights |> 
  rename(air_time_min = air_time) |> 
  relocate(air_time_min, .before = everything())
```

Why doesn't the following work, and what does the error mean?

It doesn't work because the arr_delay column is dropped by select before calling arrange. 

```{r}
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
```

::: callout-tip
Don't forget to render, commit, and push your changes to GitHub with an informative commit message.
:::

### Working with groups

Which carrier has the worst average delays? Challenge: can you
disentangle the effects of bad airports vs. bad carriers? Why/why not?
(Hint: think about
`flights |> group_by(carrier, dest) |> summarize(n())`)

```{r}
flights |> 
  group_by(carrier, dest) |>
  summarize(
   arr_delay_avg = mean(arr_delay, na.rm = TRUE)
  ) |> 
  ungroup() |> 
  mutate(
    arr_delay_carrier_avg = mean(arr_delay_avg, na.rm = TRUE),
    .by = carrier
  )
```

Find the flights that are most delayed upon departure from each
destination.

```{r}
flights |> 
  slice_max(dep_delay, by = dest)
```

How do delays vary over the course of the day. Illustrate your answer
with a plot.

```{r}
flights |> 
  summarise(
    dep_delay = sum(dep_delay, na.rm = TRUE),
    arr_delay = sum(arr_delay, na.rm = TRUE),
    .by = hour
  ) |> 
  ggplot(aes(hour, dep_delay / 60)) +
  geom_step() +
  # geom_smooth() +
  scale_y_log10(labels = scales::label_number())
  geom_violin(aes(hour, dep_delay, group = hour)) +
  geom_boxplot(aes(hour, dep_delay, group = hour)) +
  summarise(
    arr_delay = sum(arr_delay, na.rm = TRUE),
    dep_delay = sum(dep_delay, na.rm = TRUE),
    .by = hour
  ) |> 
  geom_area(aes(hour, dep_delay / 60), fill = "blue") +
  geom_area(aes(hour, arr_delay / 60))
```

What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and
friends?

```{r}
slice_min(flights, order_by = sched_dep_time, n = -330000)
```

Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in
terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

```{r}
count(flights, ____)

count(flights, ____, sort = ____)
```

::: callout-tip
Render, commit, and push your final changes to GitHub with a meaningful commit message.

Make sure to commit and push all changed files so that your Git pane is empty afterwards.
:::
