---
order: 5
title: "Working with spatial and geometric operations in `{sf}`"
subtitle: "Session {{< meta order >}}"
date: 2023-09-27
image: "images/st_intersections_postgis-intro.png"
format: 
  revealjs:
    output-location: column-fragment
---

## Getting started

```{r}
#| message: false
library(tidyverse)
library(sf)
library(tigris)
options(tigris_use_cache = TRUE)
```

----

```{r}
options("tigris_use_cache" = TRUE)
us_states <- states()
us_highways <- primary_roads()
maryland <- filter(us_states, NAME == "Maryland")
lower48 <- filter(us_states, !(NAME %in% c("United States Virgin Islands", "Commonwealth of the Northern Mariana Islands", "Guam", "Alaska", "American Samoa", "Puerto Rico", "Hawaii")))
```

## Converting objects between types

----

```{r}
sfg <- st_point(c(-76.712838, 39.253383))

sfg
```

----

```{r}
st_as_sfc(list(sfg))
```

----

```{r}
sfc <- st_as_sfc(list(sfg), crs = 4326)

sfc
```

----

```{r}
st_as_sf(sfc)
```

----

```{r}
sf_df <- data.frame(
  name = "Example data frame",
  lon = -76.712838,
  lat = 39.253383
)

sf <- st_as_sf(sf_df, coords = c("lon", "lat"), crs = 4326)

sf
```

## Types of spatial operations

- Spatial filtering and topological relations
- Spatial joins and non-overlapping joins
- Spatial aggregation

### Spatial filtering and topological relations

`st_filter()` efaults to intersecting geometries:

```{r}
st_filter(us_states, maryland)
```

-----

`st_filter()` can also support alternate topological relations:

```{r}
st_filter(us_states, maryland, .predicate = st_disjoint)
```

-----

![](https://r.geocompx.org/04-spatial-operations_files/figure-html/relations-1.png)

### Spatial joins and non-overlapping joins

```{r}
st_join(maryland, us_highways)
```

----

`st_is_within_distance()` is an example of a non-overlapping join:

```{r}
st_is_within_distance(us_highways, maryland, dist = units::set_units(100, "mi"))
```

----

You can use these joins for spatial filters using the base R syntax:

```{r}
is_hwy_within_dist <- st_is_within_distance(us_highways, maryland, dist = units::set_units(100, "mi"), sparse = FALSE)
us_highways[is_hwy_within_dist, ]
```

----

Or using `filter()` if you use the name of the geomtery column (and convert the matrix output into a logical vector):

```{r}
filter(us_highways, as.logical(st_is_within_distance(geometry, maryland, dist = units::set_units(100, "mi"), sparse = FALSE)))
```

### Spatial aggregation

```{r}
us_states_combine <- us_states |>
  group_by(DIVISION) |>
  summarise(
    geometry = st_combine(geometry)
  )

plot(us_states_combine[, 1])
```

## Types of geometric operations

- Simplification
- Centroids
- Buffers
- Clipping (with or without subsetting)
- Unions
- Type transformations

### Simplification

```{r}
plot(st_simplify(lower48, dTolerance = 100000)[, 1])
```

### Centroids

```{r}
plot(st_centroid(lower48)[, 1])
```

### Buffers

```{r}
plot(st_buffer(lower48, dist = 100)[, 1])
```

-----

```{r}
plot(st_buffer(lower48, dist = units::set_units(100, "mi"))[, 1])
```

### Clipping (with or without subsetting)

```{r}
plot(st_intersection(us_highways, maryland)[, 1])
```

### Unions

```{r}
us_highways_union <- us_highways |>
  group_by(RTTYP) |>
  summarise(
    geometry = st_union(geometry)
  )

plot(us_highways_union[, 1])
```

### Type transformations

```{r}
plot(st_cast(us_highways[1, ], to = "POINT"))
```

