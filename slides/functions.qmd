---
order: 7
title: "Writing functions and pipelines"
subtitle: "Session {{< meta order >}}"
image: images/rforecology_functions-graphic.png
---

# Functions

```{r}
#| echo: false
library(tidyverse)
```

![How to create a custom function in R](images/rforecology_functions-graphic.png){.r-stretch}

::: footer
Source: [How to create your own function in R](https://www.rforecology.com/post/how-to-create-your-own-function-in-r/) (R for Ecology)

:::

### Why functions?

1.  Make your code easier to understand
2.  Update code in one place, instead of many
3.  Reduce chance of making copy and paste mistakes
4.  Reuse work from project-to-project

### What is refactoring?

Refactoring is the process of making code:

- easier to understand
- cheaper to modify

...without changing behavior.

::: footer
Source: [Code Smells and Feels](https://github.com/jennybc/code-smells-and-feels) (2018)
:::

### Types of functions

1.  **Vector functions** take one or more vectors as input and return a vector as output.
2.  **Data frame functions** take a data frame as input and return a data frame as output.
3.  **Plot functions** that take a data frame as input and return a plot as output.

### Writing a function

-   Look for repeated sections of code.
-   What parts are constant?
-   What parts vary?

### Writing a function

To turn code into a function you need three things:

1.  A name.
2.  The arguments.
3.  The body.

### Writing a function

To turn code into a function you need three things:

```{r}
name <- function(arguments) {
  body
}
```

### Writing a function

Adapted from [the tidyverse style guide](https://style.tidyverse.org/functions.html):

1.  Naming functions
2.  Formatting functions
3.  Using `return()`
4.  Using comments

### Naming functions

Strive to use verbs for function names:

```{r}
# Good
add_row()
permute()

# Bad
row_adder()
permutation()
```

::: footer
Source: [Functions](https://style.tidyverse.org/functions.html#naming) from [The tidyverse style guide](https://style.tidyverse.org/index.html).
:::

### Using `return()`

Only use `return()` for early returns.

Use early returns to avoid `else` and "nested" logic.

```{r}
# Good
is_it_wednesday <- function(x) {
  wday <- wday(x, label = TRUE)

  if (identical(wday, "Wed")) {
    return("Yes!")
  }

  "No..."
}

# Bad
is_it_wednesday <- function(x) {
  wday <- wday(x, label = TRUE)

  if (identical(wday, "Wed")) {
    return("Yes!")
  } else {
    return("No...")
  }
}
```

::: footer
Source: [Functions](https://style.tidyverse.org/functions.html#return) from [The tidyverse style guide](https://style.tidyverse.org/index.html).
:::

### Using comments

Use comments to explain the "why" not the "what" or "how".

::: footer
Source: [Functions](https://style.tidyverse.org/functions.html) from [The tidyverse style guide](https://style.tidyverse.org/index.html).
:::

### Types of vector functions

-   **"mutate" functions:** functions that work well inside of `mutate()` and `filter()` because they return an output of the same length as the input.
-   **summary functions:** functions that return a single value for use in `summarize()`.

### Example of vector functions

If a function is type-stable it satisfies two conditions:

-   You can predict the output type based only on the input types (not their values).

-   If the function uses ..., the order of arguments in does not affect the output type.

::: footer
Source: [Type-stability](https://design.tidyverse.org/out-type-stability.html) from [The tidyverse style guide](https://style.tidyverse.org/index.html).
:::

<!--
### Refactoring

-->

### Designing a "tidy" function

Four guiding principles for the "tidyverse":

1.  human centered
2.  consistent
3.  composable
4.  inclusive

::: footer
From [Unifying principles](https://design.tidyverse.org/unifying.html) in [Tidy design principles](https://design.tidyverse.org/) (WIP)
:::

::: notes

Notes excerpted from Tidy design principles:

1.  It is human centered, i.e. the tidyverse is designed specifically to support the activities of a human data analyst.

2.  It is consistent, so that what you learn about one function or package can be applied to another, and the number of special cases that you need to remember is as small as possible.

3.  It is composable, allowing you to solve complex problems by breaking them down into small pieces, supporting a rapid cycle of exploratory iteration to find the best solution.

4.  It is inclusive, because the tidyverse is not just the collection of packages, but it is also the community of people who use them.
:::

# Pipelines

