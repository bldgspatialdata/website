---
title: "Reading and writing spatial data"
subtitle: "Session {{< meta order >}}"
order: 11
image: images/2016-11-29_openeo_gdal-diagram.png
format: 
  revealjs: 
    number-sections: false
---

## Overview

- Spatial data is everywhere
- Navigating specifications, file formats, and services
- Working with common spatial file formats
- Working with popular spatial web services

## Spatial data is everywhere

- Shapefiles, GeoJSON files, and other spatial data files
- Spatial data editing and hosting services, e.g. [ArcGIS Online](https://www.esri.com/en-us/arcgis/products/arcgis-online/overview) or [Felt](https://felt.com/maps/recent))
- Open data portals serving spatial and non-spatial data, e.g. [data.gov](https://data.gov/)

## Spatial data is everywhere

- Google Maps, Apple Maps, Waze, and navigation apps (on your phone or [in your vehicle](https://support.google.com/googleappsincar/answer/9941814?hl=en))
- Biking and running apps (Strava publishes a [global user activity heatmap](https://www.strava.com/heatmap#11.21/-76.64618/39.34348/hot/all))
- Web browsers on your phone and desktop application

## Spatial data is everywhere

- Phone camera photos (stored in the EXIF metadata)
- Calendars ([iCal](https://en.wikipedia.org/wiki/ICalendar)), contacts ([vCard](https://en.wikipedia.org/wiki/VCard)), and emails (using [IP address](https://en.wikipedia.org/wiki/Internet_geolocation) locations)

## Creating spatial data is "easy"

- GIS Desktop applications, e.g. [QGIS](https://qgis.org/)
- Web mapping applications (e.g. [geojson.io](https://geojson.io/#map=2/0/20), [Felt](https://felt.com/))
- Spreadsheet applications (e.g. [Google Sheets](https://sheets.google.com/))
- Low-code data tools (e.g. [Airtable](https://airtable.com/) or [Microsoft Lists](https://support.microsoft.com/en-us/office/introduction-to-lists-0a1c3ace-def0-44af-b225-cfa8d92c52d7))

## What can we do with it all?

- Read and write spatial data files
- Read and write related data files
- Read from and write to web services

## Standards and specifications

[Open Geospatial Consortium (OGC) Standards](https://www.ogc.org/publications/) are organized into categories:

- APIs (e.g. [Moving Features API](https://www.ogc.org/publications/standard/ogc-api-moving-features/))
- Web Services (e.g. [Web Feature Service](https://www.ogc.org/publications/standard/wfs/))
- Data Models and Encodings (e.g. [GeoTIFF](https://www.ogc.org/publications/standard/geotiff/))
- and more (Sensors, Publish-Subscribe, Syndication & Context, Discovery, Containers, Abstract Specifications)

::: notes


:::

## Standards and specifications

![](https://imgs.xkcd.com/comics/standards.png)

Source: [xkcd: Standards](https://xkcd.com/927/) (CC BY-NC 2.5)

::: notes

:::

## Common spatial file formats

- Shapefile (`.shp`)
- GeoJSON (`.json`, `.geojson`)
- GeoPackage (`.gpkg`)
- KML - Keyhole Markup Language (`.kml`)
- Esri File Geodatabase (`.gdb`)
- GPX - GPS Exchange Format (`.gpx`)

::: notes

- Vector spatial: Shapefile, [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON), KML
- Raster spatial: [GeoTIFF](https://en.wikipedia.org/wiki/GeoTIFF), 
- Tabular data with geometry: CSV, Microsoft Excel, delimited text with coordinates or WKT (well known text)

:::

## Common spatial file formats

These file formats vary in:

- How geometry is stored
- Input/output speed
- File size
- Compatibility with tools/systems
- Other constraints or limits
- And more!

## Specialized spatial file formats

- Raster data
  - Digital Elevation Model (DEM)
  - [GeoTIFF](https://www.ogc.org/publications/standard/geotiff/)
- Map tiles
  - [MBTiles](https://github.com/mapbox/mbtiles-spec)
  - [PMTiles](https://docs.protomaps.com/pmtiles/)
  
## Specialized spatial file formats

- Columnar data formats
  - [GeoParquet](https://geoparquet.org/)
  - [GeoArrow](https://geoarrow.org/)
- Databases
  - [PostGIS](https://postgis.net/)
- Other
  - [FlatGeobuf](https://flatgeobuf.org/)
  
::: notes
- DEM Standards from USGS - https://www.usgs.gov/3d-elevation-program-standards-and-specifications
- Mapbox glossary - https://docs.mapbox.com/help/glossary/mbtiles/
:::

<!-- ## Examples -->

<!-- ![](https://www.census.gov/content/dam/Census/newsroom/blogs/2016/04/understanding-census-bureau-address-ranges/Orris-figure.jpg) -->

<!-- ::: notes -->
<!-- Census data -->

<!-- ::: -->

<!-- --- -->

<!-- ![](https://i0.wp.com/transportgeography.org/wp-content/uploads/esri_shapefile_model.png?w=1800&ssl=1) -->

<!-- ::: notes -->

<!-- Shapefile model -->
<!-- ::: -->

<!-- ---- -->

<!-- ![](https://developers.google.com/static/kml/documentation/images/classTree52.gif) -->

<!-- ::: notes -->

<!-- KML -->

<!-- Source: https://developers.google.com/kml/documentation/kmlreference -->
<!-- ::: -->

<!-- ---- -->

<!-- ![](https://wiki.openstreetmap.org/w/images/thumb/1/10/ERD_of_OSM_DB.svg/1280px-ERD_of_OSM_DB.svg.png){.lightbox} -->

<!-- ::: notes -->

<!-- Open Street Map -->

<!-- SVG: https://wiki.openstreetmap.org/wiki/File:ERD_of_OSM_DB.svg -->
<!-- ::: -->

## Historically, many tools and formats did not work together

![](https://r-spatial.org/images/gis2.png)

## Now, GDAL supports translation between *many* different formats

![](https://r-spatial.org/images/gis3.png)

::: notes
GDAL is a translator library for raster and vector geospatial data formats.
:::

## Read spatial data files with R

The `dsn` or data source name for `sf::read_sf()` can include:

- a file name
- a URL
- a folder
- the name and access credentials of a database
- a character string with the contents of a GeoJSON file

## Read spatial data files with R

You can use the `query` parameter of `sf::read_sf()` to use a SQL query to select records from a file (or select a specific geographical extent).
  
## Many file formats *can* include spatial data

Non-spatial files can still be used to store Well Known Text (WKT) strings, coordinate values, or addresses (convertible to spatial data):

- Excel files (`xlsx` or `xls`)
- vCard or VCF (Virtual Contact File)
- EXIF metadata in a JPEG, HEIC, PNG, TIFF or other media file

## Reading data into R
  
- Read data using `{sf}`
- Read data using a package that returns a `sf` object
- Read data and use `{sf}` to convert to a `sf` object

## Writing data from R

- Write data to a spatial file using `{sf}`
- Write data a a non-spatial file using a different package

When you write spatial data to a non-spatial format, you should drop the geometry or convert the geometry to coordinates or well-known text.

## Read data using `{sf}`

First load `{sf}`:

```{r}
library(sf)
```

## Read data using `{sf}`

`{sf}` can use any available drivers to read data:

```{r}
drivers <- sf::st_drivers()

drivers
```

## Read data from a URL using `{sf}`

`read_sf()` works well with a direct link to a spatial data file.

Read a GeoJSON file:

```{r}
# GeoJSON (geojson)
read_sf("https://github.com/ropensci/geojsonio/raw/main/inst/examples/california.geojson")
```

----

Read a KML file:

```{r}
# Keyhole Markup Language (kml)
read_sf("https://github.com/ropensci/geojsonio/raw/main/inst/examples/poa_annua.kml")
```

----

Read a GeoPackage file:

```{r}
# GeoPackage (gpkg)
read_sf("https://github.com/r-spatial/sf/raw/main/inst/gpkg/nc.gpkg")
```

----

Even non-spatial data works if the data includes a well-known text column:

```{r}
# Comma-separated values (csv)
read_sf("https://github.com/r-spatial/sf/raw/main/inst/csv/pt.csv")
```

----

If the non-spatial data does not include a well-known text column, `read_sf()` still returns a data frame:

```{r}
read_sf("https://github.com/elipousson/marylandedu/raw/main/data-raw/extdata/Enrollment_By_Grade_2023.csv")
```

----

A multifile format like a shapefile does *not* work as a URL:

```{r}
# Shapefile (shp)
read_sf("https://github.com/r-spatial/sf/raw/main/inst/shape/nc.shp")
```

But it *does* work if you provide a local file path (`system.file()` returns a file path in this case):

```{r}
read_sf(system.file("shape/nc.shp", package = "sf"))
```

## Working with web services

Examples of common web services for working with spatial data include:

- Spatial data sharing and discovery
- Spatial data visualization
- Routing
- Geocoding

## Considerations when working with web services

Using a web service often requires:

- Creating an account for authentication and billing
- Dedicating funding for usage
- Understanding data privacy implications

## Example: Feature Services

An ArcGIS FeatureServer URL does *not* work:

```{r}
read_sf("https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MDOT_SHA_County_Boundaries/FeatureServer/0")
```

But a FeatureServer URL that includes the output format *does* work:

```{r}
read_sf("https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MDOT_SHA_County_Boundaries/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
```

There are a wide variety of packages that you can use to supplement  `{sf}`.

```{r}
library(arcgislayers)

feature_layer <- arc_open("https://services.arcgis.com/njFNhDsUCentVYJW/arcgis/rest/services/MDOT_SHA_County_Boundaries/FeatureServer/0")

arc_select(feature_layer)
```

::: notes

- Practice writing a query with arc_select

:::

## Example: Mapbox API

`mapboxapi::mb_isochrone()` allows access to the [Mapbox Isochrone API](https://docs.mapbox.com/api/navigation/isochrone/):

```{r}
library(mapboxapi)

walk_5min <- mb_isochrone(
  "100 Holliday St, Baltimore, MD 21202",
  profile = "walking",
  time = 5
)

walk_5min
```

## Example: Mapbox API

`mapboxapi::addMapboxTiles()` provides easy access to the [Mapbox Static Tiles API](https://docs.mapbox.com/api/maps/static-tiles/): 

```{r}
library(leaflet)

leaflet(walk_5min) %>%
  addMapboxTiles(style_id = "streets-v11",
                 username = "mapbox") %>%
  addPolygons()
```

## Storing and organizing spatial data takes planning

Planning for the structure and organization of your data can be supported using a variety of tools:

- Diagram drawing applications (e.g. [draw.io](https://www.drawio.com/))
- Entity-relationship diagram tools (e.g. [drawDB](https://www.drawdb.app/))
- Low-code, visual database applications (e.g. [Airtable](https://airtable.com/)) 
